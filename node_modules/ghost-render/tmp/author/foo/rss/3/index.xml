<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Mixu - Mixu's blog]]></title><description><![CDATA[A blog]]></description><link>http://localhost:5000/</link><generator>Ghost</generator><lastBuildDate>Mon, 06 Oct 2014 00:15:41 GMT</lastBuildDate><atom:link href="http://localhost:5000/author/foo/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Simple tweaks: make Gnome look and work better]]></title><description><![CDATA[<p>These are the things I do to customize Gnome after a new install. These are all rather simple tweaks, but they help a lot!</p>
<p><h2>1. Install Guake</h2>
<a href="http://blog.mixu.net/files/2010/11/Fedora-14-2010-11-13-20-13-51.png"><img class="alignnone size-full wp-image-1291" title="Fedora 14-2010-11-13-20-13-51" src="http://blog.mixu.net/files/2010/11/Fedora-14-2010-11-13-20-13-51.png" alt="" width="614" height="298" /></a></p>
<p>Guake is a top-down terminal for Gnome (in the style of the terminal used in Quake). It allows you to switch to the console just by pressing F12. Highly recommended, since a lot of things are still done in the console.</p>
<p><h2>2. Change the terminal to half-transparent and dark</h2>
Start Terminal -&gt; Edit -&gt; Profile preferences: change Colors to White on Black instead of the system theme, then set Background -&gt; Transparent background.</p>
<p><h2>3. Get rid of the top panel, and get rid of &quot;Applications | Places | System&quot;</h2>
<a href="http://blog.mixu.net/files/2010/11/Fedora-14-2010-11-13-20-27-19.png"><img class="alignnone size-full wp-image-1292" title="Fedora 14-2010-11-13-20-27-19" src="http://blog.mixu.net/files/2010/11/Fedora-14-2010-11-13-20-27-19.png" alt="" width="614" height="259" /></a></p>
<p>Right-click and unlock all the panel items on the top panel, and move them to the bottom panel . Remove the default menu completely, and add the more compact &quot;Main menu&quot; (Add to Panel -&gt; Main Menu). Change the date widget to only show the time.</p>
<p><h2>4. Install compiz (not really for the 3D effects, but for the productivity options)</h2>
httpv://www.youtube.com/watch?v=7eaI9YcxD9s</p>
<pre class="hljs"><code><span class="hljs-title">yum</span> -y install compiz-fusion-extras libcompizconfig ccsm 
compiz-manager libcompizconfig compiz-fusion-extras-gnome fusion-icon-gtk</code></pre><p>Enable the following effects using compizconfig from the Gnome menu:</p>
<p>General Options</p>
<p><ul>
    <li>Key bindings: Set Maximize Window to Super + Up, Unmaximize Windows to Super + Down and Show Desktop to Super + d, just like on Windows 7.</li>
</ul>
Desktop effects:</p>
<p><ul>
    <li>Desktop Wall. Visually shows your desktop moving to the left/right when you switch between virtual desktops using Ctrl+Alt+Right/Left. I think it looks nice, and makes virtual desktops feel a bit more tangible and usable.</li>
</ul>
Window management:</p>
<p><ul>
    <li>Application Switcher. A visual version of Alt+Tab, which shows window previews. No need to configure.</li>
    <li>Grid. A better version of Aero Snap. Allows you to move windows around the desktop, a bit like the Win+Left / Win + Right shortcuts in Windows 7. I always just bind the &quot;Put Left&quot; and &quot;Put Right&quot; shortcuts to Super + Left and Super + Right (which is the same convention as Windows) and ignore the rest, since I don&#39;t have a keypad on my laptops.</li>
    <li>Snapping Windows. Makes the windows stick to the edges of the screen when moved/resized.</li>
</ul>
Also potentially useful:</p>
<p><ul>
    <li>Scale. Basically a copy of Mac OS X Expose; scales down your windows and allows you to select via mouse the one you want.</li>
</ul>
All the other stuff is mostly useless, but feel free to try out all the different plugins.</p>
<p><h2>5. Enable font smoothing and install better fonts</h2>
Enable subpixel rendering for fonts under System -&gt; Preferences -&gt; Apperance -&gt; Fonts, and have a look at <a href="http://fedorasolved.org/Members/khaytsus/improve-fonts">this tip </a>for installing more fonts.</p>
<p><h2>6. Install gnome-color-chooser and customize the taskbar background by changing the image</h2>
I like to have a dark taskbar (panel). However, this is hard to do with the default tools in Fedora, because the &quot;Appearance&quot; app does not allow you to configure the panel background separately from the window background even though GNOME supports different colors for these two parts.</p>
<p>So you need to install gnome-color-chooser. Ubuntu has in the repos:</p>
<pre class="hljs"><code>sudo apt-get install gnome-<span class="hljs-keyword">color</span>-chooser</code></pre><p>For Fedora, you need to <a href="http://blog.mixu.net/2010/11/15/how-to-install-gnome-color-chooser-for-fedora/">follow my instructions to install it from source</a>. Tested with F13 and F14.</p>
<p>Then go under System -&gt; Preferences -&gt; Gnome Color Chooser -&gt; Panel and set all the backgrounds to black and all the foreground colors to white or near-white colors. Apply.</p>
<p>To make your panel look better, use one of the following background or Google for more:</p>
<p>36 px height background: <a href="http://blog.mixu.net/files/2010/11/99748-2.png"><img class="alignnone size-full wp-image-1302" title="99748-2" src="http://blog.mixu.net/files/2010/11/99748-2.png" alt="" width="30" height="36" /></a></p>
<p><a href="http://blog.mixu.net/files/2010/11/99748-2.png"></a>24 px height background: <a href="http://blog.mixu.net/files/2010/11/aero-task-bg.png"><img class="alignnone size-full wp-image-1303" title="aero-task-bg" src="http://blog.mixu.net/files/2010/11/aero-task-bg.png" alt="" width="16" height="24" /></a></p>
<p>Win7 style: <a href="http://blog.mixu.net/files/2010/11/win7.png"><img class="alignnone size-full wp-image-1332" title="win7" src="http://blog.mixu.net/files/2010/11/win7.png" alt="" width="36" height="30" /></a> (use panel item background color: #8194aa and white text)</p>
<p>Right-click, save as image, then right-click on the panel and set the downloaded image as the background.</p>
<p><h2>7. Result</h2>
This is how the resulting desktop looks like:</p>
<p><a href="http://blog.mixu.net/files/2010/11/Screenshot.png"><img class="alignnone size-full wp-image-1316" title="Screenshot" src="http://blog.mixu.net/files/2010/11/Screenshot.png" alt="" width="614" height="461" /></a></p>
<p>If you want to customize the window chrome, look into enabling emerald and find a theme that works for you, or just find a GTK theme from the link under the &quot;Appearance&quot; app.</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Tue, 16 Nov 2010 08:00:00 GMT</pubDate></item><item><title><![CDATA[How to install gnome-color-chooser for Fedora]]></title><description><![CDATA[<p><a href="http://blog.mixu.net/files/2010/11/Screenshot-GNOME-Color-Chooser.png"><img class="size-full wp-image-1306 alignleft" style="margin-right: 10px;" title="Screenshot-GNOME Color Chooser" src="http://blog.mixu.net/files/2010/11/Screenshot-GNOME-Color-Chooser.png" alt="" width="277" height="428" /></a>Gnome-color-chooser is a tool which allows you to control the colors used in GNOME with a lot more granularity than the default &quot;Appearance&quot; app.</p>
<p>Unfortunately, Fedora does not have a repository with a gnome-color-chooser rpm, so you will need to compile it yourself.</p>
<p>Here are the instructions, tested with gnome-color-chooser v. 0.2.5 and Fedora 13/14:</p>
<pre class="hljs"><code>su

yum install wget gcc-c++ glib-devel intltool gtkmm24-devel libglademm24-devel libgnomeui-devel libgnome-devel libxml2-devel

wget <a href="http://downloads.sourceforge">http://downloads.sourceforge</a>.<span class="hljs-winutils">net</span>/project/gnomecc/gnome-<span class="hljs-built_in">color</span>-chooser/<span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">5</span>/gnome-<span class="hljs-built_in">color</span>-chooser-<span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.tar.gz

tar -xzvf gnome-<span class="hljs-built_in">color</span>-chooser-<span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.tar.gz

mv gnome-<span class="hljs-built_in">color</span>-chooser-<span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">5</span> /opt/gnome-<span class="hljs-built_in">color</span>-chooser

<span class="hljs-built_in">cd</span> /opt/gnome-<span class="hljs-built_in">color</span>-chooser/

./configure

make

make install</code></pre><p>After installing, you can find it under System -&gt; Preferences -&gt; Gnome Color Chooser.</p>
<h2 id="comments">Comments</h2>
<p><strong><a href="#270" title="2011-02-21 06:31:57">trm96</a>:</strong> Awesome thanks! Works like a charm!</p>
<p><strong><a href="#271" title="2012-04-30 10:39:33">andyfitz</a>:</strong> thanks!</p>
<p><strong><a href="#272" title="2012-06-11 04:34:14">David</a>:</strong> Thank you very much. Works perfect on CentOS-6</p>
<p><strong><a href="#273" title="2012-06-14 13:59:11">Daniel</a>:</strong> tested under Fedora 16 - works</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Mon, 15 Nov 2010 08:00:00 GMT</pubDate></item><item><title><![CDATA[Kohana 3 i18n tutorial]]></title><description><![CDATA[<p>Continuing my series on Kohana 3 (see <a href="http://blog.mixu.net/2010/09/14/kohana-3-auth-sample-implementation-and-documentation/">Auth here</a> and <a href="http://blog.mixu.net/2010/10/30/how-to-use-kohana-3-validation-with-forms/">Validation here</a>), I&#39;m tackling Kohana 3 internationalization in this post.</p>
<p><h2>How Kohana 3 I18n works</h2>
Kohana 3&#39;s i18n functionality is implemented in two files:</p>
<p><ul>
    <li>/system/classes/i18n.php - Implements the i18n class, which provides all the functionality.</li>
    <li>/system/base.php - Implements the __() function, which is most commonly used for translating strings.</li>
</ul>
The <a href="http://kohanaframework.org/guide/api/I18n">Kohana_I18n class</a> provides the following functions:</p>
<p><ul>
    <li><strong>I18n::lang($lang = NULL)</strong>. Gets or sets the target language for translation. Call without parameters to get the current target language to which strings will be translated to.</li>
    <li><strong>I18n::get($string, $lang = NULL)</strong>. Returns the translation of the source string, optionally specifying what the target language should be. You should not usually use this function, however it has some uses (discussed later).</li>
    <li><strong>I18n::load($lang)</strong>. Loads the translation table for a given language, caches it and returns it.</li>
</ul>
The base file provides one translation function, the double underscore:</p>
<p><ul>
    <li><strong><strong>($string, $values, $lang = &#39;en-us&#39;)</strong>. When the current target language is the same as the param $lang, returns the same string. When the current target language is something else, returns the translated string if it exists, or the same string if it does not.The $values array determines replacements made in the string.</li>
</ul>
</strong>() is the main function you should be using. Just wrap all your strings into it.</p>
<p><strong>Storing and loading the translation strings</strong></p>
<p>As you notice if you look at the source, there are no translation strings here. They are stored under /application/i18n/<em>languagename</em>.php, where <em>languagename</em> is the name of the language you want to use. Kohana uses the string &quot;en-us&quot; as the default target language.</p>
<p>Note how the default language string has two parts: one specifying the language (en for English) and another for the region (us for the US).</p>
<p>Loading is done automatically on-demand when you call __(). The loading function I18n::load() works in a way that it can flexibly search for a file. It explodes the string on the &quot;-&quot; character, so the default target language &quot;en-us&quot; results in a search for the following files:</p>
<p><ul>
    <li>/application/i18n/en.php</li>
    <li>/application/i18n/en/us.php</li>
</ul>
Note that the order means that you can have a single language file for English, and then override some parts of the file - for example with the target language string &quot;en-gb&quot;, Kohana would first load the en.php file and then the /en/gb.php file; this makes it easy to have regional variants for strings (&quot;color&quot; vs. &quot;colour&quot;).</p>
<p><h2>What should I store in the i18n language files?</h2>
This is an important question, and Kohana does not make it for you. There are basically two approaches:</p>
<p><strong>Option 1: Storing identifiers</strong></p>
<pre class="hljs"><code>// <span class="hljs-flow">in</span> View
<span class="hljs-keyword">echo</span> __(&#39;about.description&#39;);
// <span class="hljs-flow">in</span> /i18n/latin.php
return array(
    &#39;about.description&#39; =&amp;gt; &#39;Lo<span class="hljs-comment">rem ipsum dolor amet...&#39;,</span>
);</code></pre><p><strong>Option 2: Storing the translated string itself</strong></p>
<pre class="hljs"><code>// <span class="hljs-flow">in</span> View
<span class="hljs-keyword">echo</span> __(&#39;This is a sample text...&#39;);
// <span class="hljs-flow">in</span> /i18n/latin.php
return array(
    &#39;This is a sample text...&#39; =&amp;gt; &#39;Lo<span class="hljs-comment">rem ipsum dolor amet...&#39;,</span>
);</code></pre><p>Which one is better? This is a matter of preference, and I strongly advise that you store the translated string itself. I absolutely <strong>HATE </strong>storing identifiers, having done that and worked with some applications that store identifiers. <a href="http://github.com/shadowhand">shadowhand </a>(Kohana&#39;s benevolent dictator) agrees, see <a href="http://forum.kohanaframework.org/discussion/comment/41757/">this discussion</a> and <a href="http://forum.kohanaframework.org/discussion/comment/24814/">this discussion</a>.</p>
<p>The problem with identifiers is that they make you remember a million different strings and hunt around for the right string to change in your file. Your translators have to remember what &quot;about.description&quot; meant when they translate your files, and you have to remember what is behind &quot;about.description&quot; when you make code changes. This is a maintenance nightmare, and if you forget to translate a string, the user will see a cryptic identifier.</p>
<p>The pros of identifiers are that the translation files are slightly smaller and use slightly less memory, and that you can change the translation files without changing the code. However, these are in my opionion rather meager advantages compared to the maintenance problems that are created.</p>
<p>Storing the string itself is better, because it allows you to see the text in your files and allows you to edit the translation in-place. This 1) allows for direct editing, and 2) makes it obvious that a new translation is needed since the English text is shown, and 3) if you forget to translate a string, the user will see something in English rather than just a identifier.</p>
<p>The nice thing is that if you write your application in the default target language, no I18n calls are performed when you use <strong>()! So you don&#39;t even pay the cost of a lookup. You do not need to create a translation file for the default language, because strings in the default language will be returned as-is by </strong>().</p>
<p>TL;DR: Store the translated string itself.</p>
<p><h2 style="font-size: 1.5em;">How do I tell Kohana I want to translate a string?</h2>
Use <strong>(&#39;This is my string&#39;). If the string is in a language other than en-us, then use </strong>(&#39;String&#39;, null, &#39;language&#39;); you will then need to have a /application/i18n/en.php file for the English equivalent.</p>
<p>If you need to replace items in the string, do something like:</p>
<pre class="hljs"><code>echo __(<span class="hljs-string">&#39;Dear :firstname, your username is: :user&#39;</span>, <span class="hljs-built_in">array</span>(
      <span class="hljs-string">&#39;:firstname&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-variable">$user</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;name,
      <span class="hljs-string">&#39;:user&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-variable">$user</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;username,
      ));<span class="hljs-subst">&lt;</span>/pre<span class="hljs-subst">&gt;</span></code></pre><p><h2>How do I start collecting the i18n strings?</h2>
Put a file like this as /application/languagename.php:</p>
<pre class="hljs"><code>&amp;lt;?<span class="hljs-function">php <span class="hljs-title">defined</span><span class="hljs-params">(<span class="hljs-string">&#39;SYSPATH&#39;</span>)</span> or <span class="hljs-title">die</span><span class="hljs-params">(<span class="hljs-string">&#39;No direct script access.&#39;</span>)</span></span>;

<span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">array</span><span class="hljs-params">(
    <span class="hljs-string">&#39;Hello World&#39;</span> =&amp;gt; <span class="hljs-string">&#39;Terve maailma&#39;</span>,
)</span></span>;</code></pre><p>and start writing the English-to-your-language strings.</p>
<p><strong>Now that you know how to do that - don&#39;t do it manually!</strong> Instead <a href="http://blog.mixu.net/2010/06/02/kohana3-automatically-collect-internationalization-strings/">take a look at my automatic I18n string collector</a>, which extends I18n and automatically detects missing translations (for whatever language is currently set as the target), and keeps updating your translation files. It saves some serious amounts of time.</p>
<p><h2>How do I allow the user to switch the language dynamically?</h2>
Use a cookie to store the user language, then load the value in /application/bootstrap.php:</p>
<pre class="hljs"><code><span class="hljs-comment">// default value for the cookie is &#39;fi&#39; for Finnish</span>
<span class="hljs-variable">$lang</span> <span class="hljs-subst">=</span> Cookie<span class="hljs-tag">::get</span>(<span class="hljs-string">&#39;lang&#39;</span>, <span class="hljs-string">&#39;fi&#39;</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-subst">!</span>in_array(<span class="hljs-variable">$lang</span>, <span class="hljs-built_in">array</span>(<span class="hljs-string">&#39;fi&#39;</span>, <span class="hljs-string">&#39;sv&#39;</span>, <span class="hljs-string">&#39;en-us&#39;</span>))) {
   <span class="hljs-comment">// check the allowed languages, and force the default</span>
   <span class="hljs-variable">$lang</span> <span class="hljs-subst">=</span> <span class="hljs-string">&#39;fi&#39;</span>;
}
<span class="hljs-comment">// set the target language</span>
i18n<span class="hljs-tag">::lang</span>(<span class="hljs-variable">$lang</span>);</code></pre><p>Then provide some sort of interface to changing the cookie in a Controller:</p>
<pre class="hljs"><code>function action_change_language(<span class="hljs-variable">$lang</span>) {
   <span class="hljs-keyword">if</span>(<span class="hljs-subst">!</span>in_array(<span class="hljs-variable">$lang</span>, <span class="hljs-built_in">array</span>(<span class="hljs-string">&#39;fi&#39;</span>, <span class="hljs-string">&#39;sv&#39;</span>, <span class="hljs-string">&#39;en-us&#39;</span>))) {
      <span class="hljs-variable">$lang</span> <span class="hljs-subst">=</span> <span class="hljs-string">&#39;fi&#39;</span>;
   }
   Cookie<span class="hljs-tag">::set</span>(<span class="hljs-string">&#39;lang&#39;</span>, <span class="hljs-variable">$lang</span>);
   I18n<span class="hljs-tag">::lang</span>(<span class="hljs-variable">$lang</span>);
   Request<span class="hljs-tag">::instance</span>()<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;redirect(<span class="hljs-string">&#39;page/index&#39;</span>);
}</code></pre><p>The link would look something like Html::anchor(&#39;/controller/change_language/fi&#39;, &#39;Finnish&#39;) to change the language.</p>
<h2 id="comments">Comments</h2>
<p><strong><a href="#259" title="2011-01-04 17:53:11">Alex</a>:</strong> I think storing phrases in original language as a key isn&#39;t the best practice because it turns changing it into a pain in the ass: it&#39;s a key, so it should be changed in all translations. So, it&#39;s not just about changing source to change translation: it&#39;s about changing code and all other locales.</p>
<p><strong><a href="#260" title="2011-01-04 18:12:04">Mikito Takada</a>:</strong> I guess it depends on what kind of pain you want.</p>
<p>Since I usually write the original language version and someone else maintains the translation, I prefer that changing the string directly where it is used in the code.</p>
<p>This is easier for code maintenance and a bit harder for translation file maintenance, but translation time is cheaper than coding time.</p>
<p>I think it is good that changing the original language string forces you to also add a new translation for that text in all other languages. If the string such as a help message is changed, then it is different and should have a different translation as well.</p>
<p><strong><a href="#261" title="2011-01-04 18:55:18">Alex</a>:</strong> It makes developer thinking twice about any phrase being written. It&#39;s not possible to type just about.description or so and forward the text work to copyrighter or whoever writing texts and whose time (as you correctly mentioned) is cheaper.
So usage of this approach, I think, is very limited. I mean much more limited than storing partially-faceless identifiers.</p>
<p>Just imagine that native language is not English. That original translation could say even less that [usually] English-speaking identifiers that [usually] stores the essential meaning, short but clear. Then, is it a problem to return a string from default translation which is [usually] complete? Yeah, the case it&#39;s incomplete brings us to the prime argument of &#39;identifiers vs complete strings&#39; discussion.</p>
<p>I sincerely tried to deploy the approach in a quite a large project and I failed. The only &#39;bonus&#39; that stayed unbeaten is that English version comes &#39;for free&#39; — I mean either resourses for translation during request processing and (possibly) translation by the project&#39;s author.</p>
<p>But I believe it meets more cons than pros for those developers who speak languages widespread much less than English but still have an intension to make a slightly internationalized website (not internationalized, just translated actually).</p>
<p>So I came to the point than for described kind of tasks using that loathsome identifiers is an appropriate price.</p>
<p><strong><a href="#262" title="2011-07-08 20:27:05">Logan</a>:</strong> I&#39;d say overall it&#39;s gonna be a pain either way, so you need to decide which method will be best for the project.</p>
<p>Both methods seem to have clear advantages and disadvantages, but the context in which you use either method should be considered. Perhaps if the original phrases can come from a variety of languages it makes more sense to go they key -&gt; value route, but if you are getting a handoff of templates that are already in english with the copy already there, it makes sense to just wrap them in translation functions instead of moving all the copy out into a language file - probably makes sense to be aware of how either method can be useful</p>
<p><strong><a href="#264" title="2011-11-10 15:26:56">Artjom Kurapov</a>:</strong> I would argue for using identifiers. Although using direct text may look nice and easy, don&#39;t forget that if you can easily have two different meanings for single word and even more different meanings in other languages with different context. So using same text is not an option and you need identifiers to differentiate different meanings. And let&#39;s face it, if you do make a multilingual system, then that means that its already big and complex enough.</p>
<p>Sure, developers are always rushing to add new translation with as less thinking as possible, but identifiers should be long and well structured for everyone to understand where on site it is used</p>
<p><strong><a href="#265" title="2011-11-17 18:39:01">gps</a>:</strong> Greate tutorial!
I&#39;m follow your instructions to transform my website to a multi-language website, but I dont know to to make a default language that use <a href="http://mydomain.com">http://mydomain.com</a>, and another will use <a href="http://mydomain.com/{lang-code}">http://mydomain.com/{lang-code}</a>
Thanks for reading and please help!</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Thu, 11 Nov 2010 08:00:00 GMT</pubDate></item><item><title><![CDATA[How to use Kohana 3 validation (with forms)]]></title><description><![CDATA[<p>Update: I am gradually updating my Kohana 3.0 articles to Kohana 3.1.</p>
<p><h2>Overview of Kohana 3 validation</h2>
<a href="http://kohanaframework.org/guide/security.validation">Validation</a> is done using the Validation class, or via ORM <del>using $model-&gt;check()</del> automatically via exceptions. It uses the messages functionality in KO3, which is a system for specifying validation messages for various forms (I will discuss this).</p>
<p>The steps in validating a form are:</p>
<p><ol>
    <li>Initialize the Validation class.</li>
    <li>Call Validate-&gt;check() and check whether the validation succeeded.</li>
    <li>If the validation failed, call errors($file) to get the error messages.</li>
    <li>Display the validation errors in the correct context on the form.</li>
</ol>
The first steps are covered by existing documentation, so I will focus on the last two steps here.</p>
<p><h2>Initializing the Validation class</h2>
In Kohana 3.1, the Validation class is simply initialized by setting up rules. The class has also changed from Validate (KO 3.0) to Validation (KO 3.1).</p>
<p><strong>Rules.</strong> The Validation class has a nice set of basic validation rules, including rules for email addresses, credit cards, URLs and regexps.</p>
<p><strong>KO 3.0 migration notes</strong></p>
<p>KO 3.1 validation no longer has callbacks or filters. Callbacks have been merged into rules, while filters have been removed altogether.</p>
<p>Filters were used to do things like trim() the input in KO 3.0.x - you can do array_map($array, &#39;trim&#39;).</p>
<p>Callbacks are now specified using the rule() function, see <a href="http://blog.lysender.com/2011/02/kohana-3-1-validation-adventures/">this excellent tutorial from Lysender for the details</a>!</p>
<p><h2>Some sample code</h2>
&nbsp;</p>
<pre class="hljs"><code><span class="hljs-comment">// Create a validation object</span>
<span class="hljs-variable">$validation</span> <span class="hljs-subst">=</span> Validation<span class="hljs-tag">::factory</span>(
   <span class="hljs-built_in">array</span>(
    <span class="hljs-string">&#39;email&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;no-reply@test.com&#39;</span>,
    <span class="hljs-string">&#39;name&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;Test&#39;</span>
    );
<span class="hljs-comment">// Add some basic rules</span>
<span class="hljs-variable">$validation</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;rule(<span class="hljs-string">&#39;name&#39;</span>, <span class="hljs-string">&#39;not_empty&#39;</span>);
<span class="hljs-variable">$validation</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;rule(<span class="hljs-string">&#39;email&#39;</span>, <span class="hljs-string">&#39;email&#39;</span>);
<span class="hljs-comment">// Check the result</span>
<span class="hljs-variable">$validation</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;check();

<span class="hljs-comment">// Using a single Kohana_Valid::rule</span>
<span class="hljs-comment">// for just checking a single field</span>
<span class="hljs-keyword">if</span>(Valid<span class="hljs-tag">::email</span>(<span class="hljs-string">&#39;test@test.com&#39;</span>)) {
   <span class="hljs-comment">// do something with the email</span>
}</code></pre><p><span style="font-size: 20px; font-weight: bold;">Retrieving and customizing error messages</span></p>
<p>Validation can be done for both models (on save) and various other forms. Because of this the messages are stored in separate, reusable files. You should put your message files under /application/messages/filename.php.</p>
<p>I think the logic behind this has gotten a bit more complicated for KO 3.1 - in particularly with validation messages from the ORM... have to get back to you on that.</p>
<p>The files look like this:</p>
<pre class="hljs"><code><span class="hljs-keyword">array</span>(
<span class="hljs-attribute">&#39;username</span>&#39; =&amp;gt; <span class="hljs-keyword">array</span>(
   <span class="hljs-attribute">&#39;username_available</span>&#39; =&amp;gt; <span class="hljs-attribute">&#39;This</span> username <span class="hljs-keyword">is</span> already...&#39;,
   <span class="hljs-attribute">&#39;not_empty</span>&#39; =&amp;gt; <span class="hljs-attribute">&#39;Username</span> must <span class="hljs-keyword">not</span> be empty.&#39;,
   <span class="hljs-attribute">&#39;invalid</span>&#39; =&amp;gt; <span class="hljs-attribute">&#39;Password</span> <span class="hljs-keyword">or</span> username <span class="hljs-keyword">is</span> incorrect.&#39;,
),
<span class="hljs-attribute">&#39;password</span>&#39; =&amp;gt; <span class="hljs-keyword">array</span>(
   <span class="hljs-attribute">&#39;matches</span>&#39; =&amp;gt; <span class="hljs-attribute">&#39;The</span> password <span class="hljs-keyword">and</span> password confirmation ..&#39;,
   <span class="hljs-attribute">&#39;range</span>&#39; =&amp;gt; &#39;:field must be within the <span class="hljs-keyword">range</span> <span class="hljs-keyword">of</span> :param1 <span class="hljs-keyword">to</span> :param2&#39;,
),
);</code></pre><p>Each field is a sub-array and each rule has it&#39;s own field. Note that you can use :field to specify the field name.</p>
<p>To retrieve the messages, use $validate-&gt;errors($file) where $file is the filename (no extension).</p>
<p>The return value looks something like:</p>
<pre class="hljs"><code><span class="hljs-keyword">array</span>(
   <span class="hljs-attribute">&#39;password</span>&#39; =&amp;gt; <span class="hljs-attribute">&#39;password</span> must be less than <span class="hljs-number">42</span> characters long&#39;,
   <span class="hljs-attribute">&#39;password_confirm</span>&#39; =&amp;gt; <span class="hljs-attribute">&#39;The</span> password <span class="hljs-keyword">and</span> password confirmation are different.&#39;,
   <span class="hljs-attribute">&#39;username</span>&#39; =&amp;gt; <span class="hljs-attribute">&#39;This</span> username <span class="hljs-keyword">is</span> already registered, please choose another one.&#39;,
   <span class="hljs-attribute">&#39;email</span>&#39; =&amp;gt; <span class="hljs-attribute">&#39;This</span> email address <span class="hljs-keyword">is</span> already <span class="hljs-keyword">in</span> <span class="hljs-keyword">use</span>.&#39;);</code></pre><p>The simplest way to show these is the just print them in as a list. However, I will show one way to show these messages in context on the actual form.</p>
<p><h2>Displaying validation errors in context on the form</h2>
Here is how we want to show the forms:</p>
<p><a href="http://blog.mixu.net/files/2010/10/validation1.png"><img class="alignnone size-full wp-image-1200" title="validation" src="http://blog.mixu.net/files/2010/10/validation1.png" alt="" width="650" height="147" /></a></p>
<p>To accomplish this, I have created a new<a href="https://bitbucket.org/mixu/appform/src/tip/application/classes/appform.php"> Appform helper</a> which uses the Form class, but wraps its input with application-specific markup for errors.</p>
<p>The basic idea is that you can pass <a href="https://bitbucket.org/mixu/appform/src/tip/application/views/register.php">default values, form values and error messages</a> to Appform prior to outputting the fields. It will then create the contextual markup for each of the fields. I have maintained compatibility with the Form API, with additional properties for added functionality.</p>
<p>Note: for Kohana 3.1, you need to move the error messages from _external to the base for Appform to work.</p>
<pre class="hljs"><code><span class="hljs-variable">$errors</span> = <span class="hljs-variable">$e</span>-&amp;gt;errors(<span class="hljs-string">&#39;register&#39;</span>);
<span class="hljs-variable">$errors</span> = array_merge(<span class="hljs-variable">$errors</span>, (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$errors</span>[<span class="hljs-string">&#39;_external&#39;</span>]) ? <span class="hljs-variable">$errors</span>[<span class="hljs-string">&#39;_external&#39;</span>] : <span class="hljs-keyword">array</span>()));
<span class="hljs-variable">$view</span>-&amp;gt;set(<span class="hljs-string">&#39;errors&#39;</span>, <span class="hljs-variable">$errors</span>);</code></pre><p>As a side note, I think this is exactly how the division of labor between framework and application developer should be: the framework should not impose a particular markup on the developer, but to keep application-specific code shorter, the developer should be able to create an extended version of the Form helper for the basic form layout. There are too many different preferred styles of markup, and the framework should not try to guess how you like your forms but rather provide the backend. Kohana gets this right.</p>
<p>Here is how a sample invocation would look like (note that the Appform class is not static, since each form has its own contextual data):</p>
<pre class="hljs"><code><span class="hljs-variable">$form</span> = <span class="hljs-keyword">new</span> Appform();
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$defaults</span>)) {
  <span class="hljs-variable">$form</span>-&amp;gt;defaults = <span class="hljs-variable">$defaults</span>;
}
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$errors</span>)) {
  <span class="hljs-variable">$form</span>-&amp;gt;errors = <span class="hljs-variable">$errors</span>;
}
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$values</span>)) {
  <span class="hljs-variable">$form</span>-&amp;gt;values = <span class="hljs-variable">$values</span>;
}
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$form</span>-&amp;gt;open(<span class="hljs-string">&#39;user/login&#39;</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#39;&amp;lt;ul&amp;gt;&#39;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#39;&amp;lt;li&amp;gt;&#39;</span>.<span class="hljs-variable">$form</span>-&amp;gt;label(<span class="hljs-string">&#39;username&#39;</span>, <strong>(<span class="hljs-string">&#39;Username&#39;</span>)).<span class="hljs-string">&#39;&amp;lt;/li&amp;gt;&#39;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$form</span>-&amp;gt;input(<span class="hljs-string">&#39;username&#39;</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#39;info&#39;</span> =&amp;gt; </strong>(<span class="hljs-string">&#39;You can also log in using your email address instead of your username.&#39;</span>)));
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#39;&amp;lt;li&amp;gt;&#39;</span>.<span class="hljs-variable">$form</span>-&amp;gt;label(<span class="hljs-string">&#39;password&#39;</span>, <strong>(<span class="hljs-string">&#39;Password&#39;</span>)).<span class="hljs-string">&#39;&amp;lt;/li&amp;gt;&#39;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$form</span>-&amp;gt;input(<span class="hljs-string">&#39;password&#39;</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#39;&amp;lt;/ul&amp;gt;&#39;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$form</span>-&amp;gt;submit(<span class="hljs-keyword">NULL</span>, </strong>(<span class="hljs-string">&#39;Login&#39;</span>));
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$form</span>-&amp;gt;close();</code></pre><p>You can <a href="https://bitbucket.org/mixu/appform/src">download my form validation helper from Bitbucket</a>. It&#39;s only a couple of hundred lines so it is easy to improve - a useful start for building more complex functionality for your app and also to reduce the lines of code needed for each form.</p>
<p><h2>ORM and form validation (still need to update to KO 3.1)</h2>
The Kohana ORM provides support for field validation. However, it is very much oriented towards each model having one set of validations. With ORM, the function calls are:</p>
<pre class="hljs"><code><span class="hljs-keyword">if</span> ( <span class="hljs-subst">!</span>empty(<span class="hljs-variable">$_POST</span>) <span class="hljs-subst">&amp;</span>amp;<span class="hljs-subst">&amp;</span>amp; is_numeric(<span class="hljs-variable">$id</span>) ) {
   <span class="hljs-variable">$model</span> <span class="hljs-subst">=</span> ORM<span class="hljs-tag">::factory</span>(<span class="hljs-string">&#39;user&#39;</span>, <span class="hljs-variable">$id</span>); <span class="hljs-comment">// create</span>
   <span class="hljs-variable">$model</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;values(<span class="hljs-variable">$_POST</span>); <span class="hljs-comment">// load values to model</span>
   <span class="hljs-comment">// check() initializes $model-&amp;gt;_validate with a Validation object containing the</span>
   <span class="hljs-comment">// rules, filters and callbacks from Model_User (e.g. $_rules, $_callbacks..)</span>
   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$model</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;check()) {
      <span class="hljs-variable">$model</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;save(); <span class="hljs-comment">// save the model</span>
   } <span class="hljs-keyword">else</span> {
      <span class="hljs-comment">// Load errors. The first param is the path to the</span>
      <span class="hljs-comment">// message file (e.g. /messages/register.php)</span>
      <span class="hljs-variable">$content</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;errors <span class="hljs-subst">=</span> <span class="hljs-variable">$user</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;validate()<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;errors(<span class="hljs-string">&#39;register&#39;</span>);
   }
}</code></pre><p>You may want to do something different, either using a different set of rules or a different set of features! The classic example is user profile editing, where you do not want to force the user to re-enter their password - so you need to exclude the password rules from the Validation check.</p>
<h2 id="comments">Comments</h2>
<p><strong><a href="#255" title="2011-03-30 17:27:05">NARKOZ</a>:</strong> There are no filters in Kohana 3.1</p>
<p><strong><a href="#256" title="2011-11-19 21:55:54">Palkonyves</a>:</strong> Yep, but you can get the same functionality with own callback as rule e.g.:
function trim<em>(&amp;$value){
  $value = trim($value);
}
$val-&gt;rule(&#39;name&#39;, &#39;trim</em>&#39;, array(&#39;:value&#39;));</p>
<p>my problem with it in kohana 3.2 that I cannot get back the validated array from the Validation object on which I used several callbacks.</p>
<p>I would like something like:
if( $validation-&gt;check() ){
   $validation-&gt;getValidatedData();
}</p>
<p>any idea how to do this without changing this core class?</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Sat, 30 Oct 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[CakePHP gripes]]></title><description><![CDATA[<p>I&#39;ve used CakePHP for quite a while now, so here are the things I find most problematic about it:</p>
<p><strong><span style="text-decoration: underline;">Auth and ACL functionality</span></strong></p>
<p>Many superficial reviews point this out as a strength of CakePHP. It is definitely NOT a strong point, because the included ACL is too darn complex. In particular, the ACL functionality has multiple different modes: actions mode (e.g. read, write permissions), CRUD (e.g. create, read, update, delete permissions) mode  (both DB-based) and a file based mode.</p>
<p>These modes each require different types of database table setup in terms of how you will structure the permissions. Unfortunately, doing that is also rather complex because the ACL stores the rights using the <a href="http://debuggable.com/posts/cakephp-and-acl-why-is-it-so-difficult:480f4dd5-ae90-4ac6-a29a-4caccbdd56cb">MPTT</a> (Modified Preorder Tree Traversal) method. If you aren&#39;t using MPTT elsewhere, then that&#39;s another thing to figure out, and manually figuring out what is going on is quite painful. I also remember reading someone gripe about the number of queries it generates.</p>
<p>Furthermore, there is a large number of tables and keeping these in sync is left as an exercise to the implementer. In particular, while creating a new user will update the appropriate ARO table rows, subsequent updates the user or groups will need to have their ARO synchronization implemented manually since Cake&#39;s magic does not handle these parts.</p>
<p><strong><span style="text-decoration: underline;">Code generation</span></strong></p>
<p>It is easy to get started with generating models, views, controllers and tests, but code generation is a rather minor benefit in my opinion, since once you get past the first version of the program you will still end up writing more UI code and scrapping most of the generated code.</p>
<p>A minor annoyance is that the generated controllers and views separate the view and edit actions, which is in many cases not really necessary. You can often use the edit view for viewing data - which leads to less code to maintain (one view vs. two views). <a href="http://www.pseudocoder.com/archives/free-cakephp-e-book-super-awesome-advanced-cakephp-tips">Here is how you can do that (CakePHP tips booklet)</a>.</p>
<p><strong><span style="text-decoration: underline;">Scaffolding</span></strong></p>
<p>Scaffolding is nice in the first five minutes. However, in particular with models it tends to get in your way when you least expect it. In particular, the scaffolding for plugins is easy to trigger accidentally because CakePHP expects a particular naming scheme - and then you end up wondering why the models you just created don&#39;t seem to have any of the functions you added.</p>
<p>I&#39;ve ended up patching the core so that CakePHP dies if it tries to load a scaffolded model - and that has made these bugs easier to prevent. <a href="http://blog.mixu.net/2010/10/06/tip-disable-cakephp-model-auto-load-and-trace-the-load-paths/">Here is how I did it</a>.</p>
<p>Furthermore, the scaffolding gets things wrong in complex cases - for a simple example, an hasOne and a hasMany have identical table structures, so it isn&#39;t possible to correctly determine which one should be used. And then there are the HABTM join tables, which you might want to retrieve as separate entities (e.g. due to relation data in the join table) in addition to the actual tables.</p>
<p><strong><span style="text-decoration: underline;">ORM</span></strong></p>
<p>The most awesome part of CakePHP is the <a href="http://book.cakephp.org/view/474/Containable">Containable behavior</a>. The base ORM is a bit greedy, and reads all attached models - and setting the recursive param to a particular level is a very blunt tool for including/excluding attached data.</p>
<p>However, I really like the Containable behavior, which allows you to specify arbitrarily deep nesting paths. This is a huge time saver.</p>
<p>Of course, the ORM returns arrays rather than objects, which is a limitation, but one that I can live with - and PHP5 will be in the core sooner or later.</p>
<p><strong><span style="text-decoration: underline;">Helpers</span></strong></p>
<p>CakePHP&#39;s <a href="http://book.cakephp.org/view/204/Form-Element-Specific-Methods">Form helper</a> is a bit of a pain in the neck if you want to use your own markup rather than whatever CakePHP wants you to use. Some unwanted markup gets added automatically. The element creation functions differ slightly from each other, which means you need to look them up (e.g. form-&gt;radio vs. form-&gt;select) from the manual quite frequently. Kohana 3 <a href="http://kohanaframework.org/guide/api/Form">has a nicer API</a>.</p>
<p>The magic, while helpful for standard forms is problematic if you really need to build a custom form. It would be better if the base Form helper were simpler and there would be an extended version which would implement things like the surrounding markup rather than having these two in the same helper.</p>
<p>The Paginator helper is quite nice for implementing paginated views.</p>
<p><span style="text-decoration: underline;"><strong>Models</strong></span></p>
<p>CakePHP does provide <a href="http://book.cakephp.org/view/76/Callback-Methods">callbacks </a>such as afterSave for models, but at least for now these <a href="http://cakephp.lighthouseapp.com/projects/42648/tickets/95-afterfind-and-beforefind-callbacks-not-working-on-associated-models-was-translate-behavior-should-translate-associated-model-data">do not actually fire in all of the &quot;edge cases&quot; such as in associated models</a>. This means that one can&#39;t rely on those to actually work in all cases, which is a shame.</p>
<p><strong><span style="text-decoration: underline;">Is it worth it?</span></strong></p>
<p>All in all, these are the problems I&#39;ve run into using CakePHP. It&#39;s not a bad framework, there are just cases in which it is a bit too magical. I recommend keeping these things in mind when considering whether to use Cake - <span style="text-decoration: underline;">you might not run into any of these issues at all </span>for some types of applications, while others will.</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Sun, 10 Oct 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[Tip: Disable CakePHP model auto-load and trace the load paths]]></title><description><![CDATA[<p>Here is how to disable the model auto-loading in CakePHP:</p>
<pre lang="php">// .. around line 140 in /cake/libs/class_registry.php
} elseif ($type === 'Model') {
   if ($plugin &amp;&amp; class_exists($plugin . 'AppModel')) {
      $appModel = $plugin . 'AppModel';
   } else {
      $appModel = 'AppModel';
   }
   $settings['name'] = $class;
   $ai =&amp; App::getInstance();
   $search = $ai-&gt;__paths('Model');
   $pathstr = '';
   $file = Inflector::underscore($class.'.php');
   foreach ($search as $path) {
      $path = rtrim($path, DS);
      if ($path === rtrim(APP, DS)) {
         $recursive = false;
      }
      if (true === false) {
         $pathstr .= $path . DS . $file.'|';
         continue;
      }
      if (!isset($this-&gt;__paths[$path])) {
         if (!class_exists('Folder')) {
            require LIBS . 'folder.php';
         }
         $Folder =&amp; new Folder();
         $directories = $Folder-&gt;tree($path, false, 'dir');
         $this-&gt;__paths[$path] = $directories;
      }
      foreach ($this-&gt;__paths[$path] as $directory) {
         $pathstr .= $path . DS . $file.'|';
      }
   }
   die("unable to find class $type, $plugin$class "
   ."(search path: ".$pathstr.")");
   ${$class} =&amp; new $appModel($settings);
}</pre>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Wed, 06 Oct 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[Setting up private SSH-based Mercurial repo hosting on Centos]]></title><description><![CDATA[<p>In this tutorial, I walk through the steps to setup Mercurial repo hosting using Mercurial-server on Centos, and setting up Putty+Mercurial on Windows to enable access. There are a lot of small things that seemed to be missing from the existing guides, so I try to cover those to help you save time in getting this set up.</p>
<h2>1. Install mercurial-server</h2>
As stated on <a href="http://mercurial.selenic.com/wiki/SharedSSH">http://mercurial.selenic.com/wiki/SharedSSH</a>, Mercurial-server is not a server but rather a management interface which uses a single shared SSH login for access and some additional logic to allow user rights to be limited.

Installing mercurial-server (version 1.0.1) on Centos requires that you tweak the makefile a bit, because it was originally designed for Debian-based systems and there are a few problems. Unfortunately, I haven&#39;t found a repo that would have mercurial-server, so there are a couple of manual steps involved.

First, install the prerequisites:

<code>bash
yum install python python-setuptool* mercurial make</code>

Then, download the source from <a href="http://www.lshift.net/mercurial-server.html">http://www.lshift.net/mercurial-server.html</a> and untar it on the server.

Open &quot;Makefile&quot; in the source directory, and make the following changes:
<ol>
    <li>For the line  &quot;installfiles: installetc installdoc pythoninstall&quot;, remove &quot;installdoc&quot;. Result should be &quot;installfiles: installetc pythoninstall&quot;. The reason why this is necessary is documented <a href="http://websaucesoftware.com/blog/?p=497">here</a>.</li>
    <li>For the line saying &quot;useradd --system --shell /bin/sh &quot;, change to &quot;useradd -r --shell /bin/sh &quot;. At least for me, the useradd command did not recognize the --system switch, so I had to use -r instead. I guess you could also remove it.</li>
</ol>
After this, run:

<code>bash
make setup-useradd</code>

(need root privileges) . I remember getting some minor warning, but it didn&#39;t seem to be a problem.
<h2>2. Copy your public key which you want to use to login onto the server</h2>
As stated in the Mercurial-server docs, you need to add the public key you want to use into /etc/mercurial-server/keys/root/put-your-username-here/put-an-easy-to-remember-name-for-your-keyfile-here .

If you are using Putty, make sure you have allowed agent forwarding under Connection -&gt; SSH -&gt; Auth -&gt; Authentication parameters -&gt; Allow agent forwarding so that ssh-add will work properly. This way you don&#39;t have to mess around with Puttygen (well, the alternative is just to open the file, then paste the OpenSSH format public key to a file and then uploading it).

Then run refresh-auth. It is actually under /usr/local/share/mercurial-server/refresh-auth instead of /usr/share (as it is in the documentation). Here are the steps on the remote server after logging in (from <a href="http://dev.lshift.net/paul/mercurial-server/docbook.html">mercurial-server documentation</a>):

<code>bash
$ ssh-add -L &amp;gt; my-key
$ sudo mkdir -p /etc/mercurial-server/keys/root/your-username
$ sudo cp my-key /etc/mercurial-server/keys/root/your-username/an-easy-to-remember-name-for-keyfile
$ sudo -u hg /usr/share/mercurial-server/refresh-auth&lt;span style=&quot;font-family: Georgia, &#39;Times New Roman&#39;, &#39;Bitstream Charter&#39;, Times, serif; font-size: x-large;&quot;&gt;&lt;span style=&quot;line-height: 19px; white-space: normal;&quot;&gt;&lt;strong&gt;
&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;</code>

<h2>3. Ensure that you can login using hg@yourserver</h2>
You first need to be able to login as hg before you can use the system. So test this out by connecting to the server using Putty (obviously, this has to be public key auth, not password auth - Google for a better tutorial on that if necessary).

Most likely, you will need to first unlock the hg account. This is because under Red Hat-based distros, users are created in a locked state (= unable to login, see also: <a href="http://www.centos.org/docs/5/html/Deployment_Guide-en-US/s1-users-tools.html">documentation</a>). This will show up under /var/log/secure as &quot;sshd[15245]: User hg not allowed because account is locked&quot;.

To unlock the hg user, setup the account password using:

<code>bash
passwd hg</code>

This should result in the account becoming unlocked.

If you are still unable to login, check the sshd_config file under /etc/ssh/sshd_config.

There are a couple of settings that have to be in place, most obviously:

<code>bash
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
AllowUsers hg and-all-the-other-allowed-users</code>

and have a look for AllowGroups/DenyGroups/DenyUsers. Remember that AllowUsers is a whitelist, you have to specify all the accounts that are allowed to log in using ssh (separated by spaces). Not having it set should be equivalent to &quot;AllowUsers *&quot;.

Remember to restart sshd if you do change the settings.
<h2>4a. Setup Mercurial on Windows to use the correct key</h2>
If you are using Putty on Windows for your client repo access, you need these settings.

In C:UsersaccountnameMercurial.ini, add the following under the [ui] section:

<code>bash
ssh=&quot;C:Program Files (x86)PuTTYplink.exe&quot; -ssh -2 -batch -C -i &quot;D:some-pathkey-file.ppk&quot;</code>

To test the connection, run:

<code>bash
&quot;C:Program Files (x86)PuTTYplink.exe&quot; -ssh -2 -batch -C -v -i &quot;D:some-pathkey-file.ppk&quot; hg@servername ls</code>

You should be able to login.

If you keep getting another IP address, make sure your Putty default settings IP is empty. And if you get a &quot;Disconnected: User aborted at host key verification&quot;, log in once using Putty and accept the server&#39;s host key.
<h2>4b. Setup Mercurial on Fedora/Centos/Redhat to use the correct key</h2>
If you are using ssh+hg on Linux for your client repo access, you need these settings.

You will need to add your key to the /var/lib/mercurial-server/.ssh/authorized_keys file, either manually or by using the steps in stage 2.

To set up the private key, edit or create ~/.ssh/config:

Host servername-or-ip
User hg
IdentityFile ~/path-to-keyfile

To test the connection, run:

ssh servername-or-ip

To set up the default pull and push locations for hg push and hg pull, change .hg/hgrc:

[paths]
default = ssh://hg@servername/reponame
default-push = ssh//:hg@servername/reponame

Further, much more detailed documentation on the hgrc file <a href="http://www.selenic.com/mercurial/hgrc.5.html">is available from Selenic</a>.
<h2>5. That&#39;s it, clone your repo to the server</h2>

<pre class="hljs"><code><span class="hljs-title">hg</span> clone --<span class="hljs-built_in">debug</span> -v . <span class="hljs-url">ssh://hg<span class="hljs-variable">@servername</span>/name-of-the-repo</span></code></pre><p>The additional switches will help in showing what is being done.</p>
<p>BTW, remember to specify the source for what you are cloning (e.g. &quot;.&quot;).</p>
<h2 id="comments">Comments</h2>
<p><strong><a href="#247" title="2011-03-01 09:30:35">Roshan</a>:</strong> Shameless Plug: If you care, there is also hg-gateway for scenarios where you don&#39;t have root access on the machine, such as the case with shared hosting accounts.</p>
<p><a href="http://parametricity.net/b/2011/02/20/hg-gateway-supporting-multiple-mercurial-users-on-a-shared-ssh-account/">http://parametricity.net/b/2011/02/20/hg-gateway-supporting-multiple-mercurial-users-on-a-shared-ssh-account/</a></p>
<p><strong><a href="#248" title="2011-12-08 06:21:36">Nick Doyle</a>:</strong> Thanks for the writeup.
Heads-up: mercurial-server apparently written for python 2.5+
while default CentOS 5.5 yum repositories currently are at 2.4.3
Resulting issue comes when hg push:</p>
<p>remote: error: changegroup.aaaaa_servelog hook raised an exception: &#39;module&#39; object has no attribute &#39;SEEK_END&#39;</p>
<p>According to python doco os.SEEK_END is new in python 2.5, with a value of 2
<a href="http://docs.python.org/library/os.html">http://docs.python.org/library/os.html</a></p>
<p>Need to either install python 2.5+
or like my quick hack, edit 2 files and replace &quot;os.SEEK_END&quot; with the number 2
Files needed to edit are:
build/lib/mercurialserver/servelog.py
src/mercurialserver/servelog.py</p>
<p><strong><a href="#249" title="2012-05-14 15:08:13">dEadY</a>:</strong> My first hg push gave me the following error, after I added a public key in the hgadmin repository:</p>
<p>remote: added 1 changesets with 1 changes to 1 files
remote: error: changegroup.aaaaa_servelog hook raised an exception: No module named simplejson</p>
<p>Since that error I&#39;m not able to access the server:</p>
<p>remote: mercurial-server: access denied
abort: no suitable response from remote hg!</p>
<p>I&#39;ve installed the python-simplejson package on the server, but of course that doesn&#39;t change the fact that I can&#39;t login anymore. I&#39;ve checked mercurial&#39;s key directories (nothing changed there) and again executed
sudo -u hg /usr/local/share/mercurial-server/refresh-auth
but no luck so far.
Any idea how to fix that again?</p>
<p><strong><a href="#250" title="2012-06-12 17:59:29">John Airey</a>:</strong> I&#39;ve hit on this problem twice the solution is this in ~hg/.bashrc</p>
<p>export PYTHONPATH=&#39;/usr/local/share/mercurial-server&#39;</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Mon, 04 Oct 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[Kohana 3 auth: sample implementation and documentation]]></title><description><![CDATA[<p>This is the 3rd part of my mini-series on Kohana 3 auth. I figure the best way to show the Kohana Auth module works is to provide a sample application module which uses auth. In this series of posts, I discuss:</p>
<p><ol>
    <li><a href="http://blog.mixu.net/2010/09/06/step-by-step-guide-to-kohana-3-auth/">Setting up the basic Auth in KO3</a> (part 1)</li>
    <li><a href="http://blog.mixu.net/2010/09/07/kohana-3-auth-the-auth-module-functionality/">An overview of the functionality provided by the Auth module</a> (part 2)</li>
    <li>Tips on implementing Auth in a custom application (part 3; this part)</li>
    <li><a href="http://blog.mixu.net/2011/01/13/getting-started-with-useradmin-my-kohana-3-auth-admin-module/">Getting started with Useradmin, my Kohana 3 auth admin module</a> (part 4)</li>
</ol></p>
<p><h3>The new release is AWESOME :), and now is based on the Kohana 3.1.x API. (You can get the old version for 3.0.x via Github.)</h3>
Here are a few screenshots:</p>
<p><span style="font-size: 13px; font-weight: normal;"><a href="http://blog.mixu.net/files/2010/09/useradmin-screen.png"><img class="alignnone size-full wp-image-1835" title="useradmin-screen" src="http://blog.mixu.net/files/2010/09/useradmin-screen.png" alt="" width="480" height="360" /></a>
</span></p>
<p><strong>New UI, more providers supported!</strong> Get it from:</p>
<p><ul>
    <li>Github: <a href="https://github.com/mixu/useradmin">https://github.com/mixu/useradmin
</a>(git clone git://github.com/mixu/useradmin.git)</li>
</ul>
This is a custom module, and the code is in /modules/user. The code contains way more comments than usual. I&#39;ve tried to make things clear, and keep the UI basic but pretty enough.</p>
<p>Further, the code is released under the BSD licence, so you can use it in commercial applications. While I don&#39;t restrict you in using the code, it is good karma to send improvements to this module back: in particular, I would like to have the features in the roadmap below.</p>
<p><strong>What functionality is there:</strong></p>
<p><ul>
    <li>Use the base Ko3 auth module and do not reinvent the wheel -- OK</li>
    <li>Support translation; no strings without __() -- OK</li>
    <li>Boilerplate for administration (create user, edit user, delete user, list users and last logins) -- OK; roles have to be added via DB but that&#39;s OK</li>
    <li>Boilerplate for users (login, logout, view profile, edit profile, unregister, access denied page; error handling/validation) -- OK</li>
    <li>reCAPTCHA optionally supported for registration -- OK; implemented for registration, thank you <a href="https://bitbucket.org/jnbdz/useradmin/">jnbdz</a>!</li>
    <li>Optional support for 3rd party login:</p>
<p><ul>
    <li>Facebook -- OK</li>
    <li>Google -- OK</li>
    <li>Yahoo -- OK</li>
    <li>Twitter -- OK (with the caveat that Twitter does not allow you to get the email address via api)</li>
</ul>
</li>
    <li>Login  using username, email or both -- OK</li>
    <li>Optional lost password reset via email -- OK; workflow is a bit clunky (user has to type the new password one time)</li>
    <li>Optional autologin support via cookies -- OK but not documented here; read about it Ko3 docs. Need to add checkbox to UI.</li>
    <li>Optional enforcement of number of failed login attempts -- is there but configuration/activation is clunky.</li>
    <li>UI design that doesn&#39;t make your eyes bleed -- OK</li>
    <li>Kohana 3.1.x support - OK, thank you gartz!</li>
</ul>
<strong>What needs to be done - contribute this!</strong></p>
<p><ul>
    <li>reCAPTCHA optionally supported for too many failed logins</li>
    <li>Optional account activation via confirmation email + expire unactivated account/welcome message via email</li>
    <li>Optional password strength indicator for client</li>
    <li>Separation between module and sample app on Github -- e.g. migrate development to Github only</li>
</ul>
<strong>Nice-to-have</strong> (perhaps release as compatible modules?)</p>
<p><ul>
    <li>Profile picture loading from Facebook, Twitter or uploaded image -- not yet.</li>
</ul>
So if you implement any of those, and don&#39;t it to be too much of a burden to publish them under the BSD licence, let me know via comments or via email (firstname.surname@gmail.com).</p>
<p><strong>Changelog is in the readme file on Github/Bitbucket.</strong></p>
<p><h2>Useful code snippets</h2>
Here are some code snippets which show you the basics of Auth:</p>
<p><strong>Create a new user</strong> (e.g. if you have not set up any users yet and want to do that programmatically)</p>
<pre class="hljs"><code><span class="hljs-variable">$model</span> <span class="hljs-subst">=</span> ORM<span class="hljs-tag">::factory</span>(<span class="hljs-string">&#39;user&#39;</span>);
<span class="hljs-variable">$model</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;values(<span class="hljs-built_in">array</span>(
   <span class="hljs-string">&#39;username&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;admin&#39;</span>,
   <span class="hljs-string">&#39;email&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;admin@example.com&#39;</span>,
   <span class="hljs-string">&#39;password&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;admin&#39;</span>,
   <span class="hljs-string">&#39;password_confirm&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;admin&#39;</span>,
));
<span class="hljs-variable">$model</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;save();
<span class="hljs-comment">// remember to add the login role AND the admin role</span>
<span class="hljs-comment">// add a role; add() executes the query immediately</span>
<span class="hljs-variable">$model</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;add(<span class="hljs-string">&#39;roles&#39;</span>, ORM<span class="hljs-tag">::factory</span>(<span class="hljs-string">&#39;role&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-keyword">where</span>(<span class="hljs-string">&#39;name&#39;</span>, <span class="hljs-string">&#39;=&#39;</span>, <span class="hljs-string">&#39;login&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;find());
<span class="hljs-variable">$model</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;add(<span class="hljs-string">&#39;roles&#39;</span>, ORM<span class="hljs-tag">::factory</span>(<span class="hljs-string">&#39;role&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-keyword">where</span>(<span class="hljs-string">&#39;name&#39;</span>, <span class="hljs-string">&#39;=&#39;</span>, <span class="hljs-string">&#39;admin&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;find());</code></pre><p><strong>Check whether current user has a role</strong></p>
<pre class="hljs"><code>Auth<span class="hljs-tag">::instance</span>()<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;logged_in(<span class="hljs-string">&#39;admin&#39;</span>) <span class="hljs-comment">// for current user</span>
<span class="hljs-subst">&lt;</span>span style<span class="hljs-subst">=</span><span class="hljs-string">&quot;font-family: Georgia, &#39;Times New Roman&#39;, &#39;Bitstream Charter&#39;, Times, serif; line-height: 19px; white-space: normal; font-size: 13px;&quot;</span><span class="hljs-subst">&gt;</span><span class="hljs-preprocessor">[</span>/codesyntax<span class="hljs-preprocessor">]</span><span class="hljs-markup">&lt;/span&gt;</span></code></pre><p><strong>Check whether some other user has a role</strong></p>
<pre class="hljs"><code>// <span class="hljs-operator"><span class="hljs-keyword">Load</span> the role
$role = ORM::factory(<span class="hljs-string">&#39;role&#39;</span>, <span class="hljs-built_in">array</span>(<span class="hljs-string">&#39;name&#39;</span> =&amp;gt;</span> &#39;admin));
// <span class="hljs-operator"><span class="hljs-keyword">Check</span> that the <span class="hljs-keyword">user</span> has the given role
$<span class="hljs-keyword">status</span> = $<span class="hljs-keyword">user</span>-&amp;gt;</span>has(&#39;roles&#39;, $role);</code></pre><p><strong>Add a role to a user</strong></p>
<pre class="hljs"><code><span class="hljs-comment">// add() executes the query immediately, and saves the data (unlike the KO2 docs say)</span>
<span class="hljs-variable">$user</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;add(<span class="hljs-string">&#39;roles&#39;</span>, ORM<span class="hljs-tag">::factory</span>(<span class="hljs-string">&#39;role&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-keyword">where</span>(<span class="hljs-string">&#39;name&#39;</span>, <span class="hljs-string">&#39;=&#39;</span>, <span class="hljs-string">&#39;admin&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;find());</code></pre><p><strong>Remove a role from a user</strong></p>
<pre class="hljs"><code><span class="hljs-comment">// remove() executes the query immediately</span>
<span class="hljs-variable">$user</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;remove(<span class="hljs-string">&#39;roles&#39;</span>, ORM<span class="hljs-tag">::factory</span>(<span class="hljs-string">&#39;role&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-keyword">where</span>(<span class="hljs-string">&#39;name&#39;</span>, <span class="hljs-string">&#39;=&#39;</span>, <span class="hljs-string">&#39;admin&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;find());</code></pre><p><strong>Retrieve all users that have a particular role</strong></p>
<pre class="hljs"><code><span class="hljs-comment">// find all the reviewer users in order of their username</span>
<span class="hljs-variable">$role</span> <span class="hljs-subst">=</span> ORM<span class="hljs-tag">::factory</span>(<span class="hljs-string">&#39;role&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-keyword">where</span>(<span class="hljs-string">&#39;name&#39;</span>, <span class="hljs-string">&#39;=&#39;</span>, <span class="hljs-string">&#39;reviewer&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;find();
<span class="hljs-variable">$users</span> <span class="hljs-subst">=</span> <span class="hljs-variable">$role</span><span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;users<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;order_by(<span class="hljs-string">&#39;username&#39;</span>, <span class="hljs-string">&#39;DESC&#39;</span>)<span class="hljs-subst">-&amp;</span><span class="hljs-literal">gt</span>;find_all();
foreach(<span class="hljs-variable">$users</span> as <span class="hljs-variable">$user</span>) {<span class="hljs-attribute">...</span>}</code></pre><p><h2>Documentation on the interesting bits</h2></p>
<p><h3>The template view</h3>
The template view in /views/default/template.php uses the Thematic-inspired markup which I discuss in <a href="http://blog.mixu.net/2010/07/20/better-web-application-interface-markup-lessons-from-theme-frameworks/">this post</a>. You can do a lot by adding a few more divs into the header div. I have tried to follow <a href="http://blog.mixu.net/2010/03/15/7-additional-tips-for-css-markup/">my own advice about CSS</a>, but the included CSS file is pretty basic. It includes the Yahoo CSS reset.</p>
<p><h3>Controller_App: base controller class</h3>
This is the &quot;base&quot; controller I use for all the classes. It handles template autoloading and auth checks. You should inherit all your controllers from Controller_App to benefit from its features.</p>
<p>There is also one additional neat thing: in case of session expiry, Kohana may show an error in session loading. There is an additional check for this in Controller_App, which discards the session in case of loading errors.</p>
<p>Template autoloading loads the file from /views/default/template.php, so that you just have to set $this-&gt;template-&gt;content = $view-&gt;render() in your controller.</p>
<p>Auth checks are configured through two additional properties in the controller:</p>
<pre class="hljs"><code>/<strong>
 <em> Controls access <span class="hljs-keyword">for</span> the whole controller, <span class="hljs-keyword">if</span> not <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span>
FALSE we will <span class="hljs-keyword">only</span> allow user roles specified.
 </em>
 <em> See Controller_App <span class="hljs-keyword">for</span> how this implemented.
 </em>
 <em> Can <span class="hljs-keyword">be</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">string</span> <span class="hljs-built_in">or</span> <span class="hljs-keyword">an</span> array, <span class="hljs-keyword">for</span> example array(<span class="hljs-string">&#39;login&#39;</span>, <span class="hljs-string">&#39;admin&#39;</span>) <span class="hljs-built_in">or</span> <span class="hljs-string">&#39;login&#39;</span>
 </em>/
public $auth_required = FALSE;

/</strong> Controls access <span class="hljs-keyword">for</span> separate actions
 <em>
 </em>  See Controller_App <span class="hljs-keyword">for</span> how this implemented.
 <em>
 </em>  Example<span class="hljs-variable">s:</span>
 * <span class="hljs-string">&#39;adminpanel&#39;</span> =&amp;gt; <span class="hljs-string">&#39;admin&#39;</span> will <span class="hljs-keyword">only</span> allow users with</code></pre><h2 id="comments">Comments</h2>
<p><strong><a href="#130" title="2010-09-25 02:05:58">Glenn Bennett</a>:</strong> Wow...thanks so much. I have an application that&#39;s I&#39;m using that I didn&#39;t write and the user management was missing and it in process of dinking around with the database I kinda messed thing up a bit.</p>
<p>Long story short(er) I found your article here and added domain management pretty easily by just installing your whole sample then hooking to the other database and with a few tweeks here and there I created a user management app for my application.</p>
<p>Thanks so much...great work.</p>
<p>P.S. Kohana drives me nuts.</p>
<p><strong><a href="#131" title="2010-10-15 08:03:54">Yuzhou Zhu</a>:</strong> When I check out the source code, I cannot find the files related to this tutorial, only a welcome.php in the controller folder. Am I missing something here?</p>
<p><strong><a href="#132" title="2010-10-15 08:25:31">Mikito Takada</a>:</strong> The auth implementation is a module, so the files are in the modules/user/ directory, not under app/.</p>
<p>This is useful because if you already have an app, you can just copy the modules/user/ folder and enable it in bootstrap.php (before loading the core Auth module). Also, you can extend the module using the Kohana 3 HMVC mechanism by redefining e.g. the user model in app/models/.</p>
<p><strong><a href="#133" title="2010-10-28 13:05:23">Peter Weil</a>:</strong> Mikito, thanks so much for this module! One issue that I&#39;m initially running into: when I go to edit a user to say, change the role,, I get this error:</p>
<p>&quot;Invalid method validate_edit called in Model_User&quot;</p>
<p>(this is the call from  line 88 in Controller_Admin_User)</p>
<p>But this very method-- validate_edit() -- is right there in Model_User. I&#39;m still trying to figure out why I&#39;m getting this error.</p>
<p><strong><a href="#134" title="2010-10-28 13:28:26">Mikito Takada</a>:</strong> Thanks for the feedback!</p>
<p>Editing user roles works using the unmodified repo. Do you happen to have a file named /application/classes/model/user.php?</p>
<p>Kohana&#39;s HMVC will use that file instead of /modules/user/classes/model/user.php if you do, so you need to copy the extra functions there - and associations... from the modules directory model when you start writing your own User model.</p>
<p><strong><a href="#135" title="2010-10-28 13:40:10">Peter Weil</a>:</strong> The <em>was</em> another Model_User class -- in the auth module. I just found the answer in the Kohana forums:  the user module has to be loaded before the auth module:</p>
<p><a href="http://forum.kohanaframework.org/discussion/comment/41585/#Comment_41585">http://forum.kohanaframework.org/discussion/comment/41585/#Comment_41585</a></p>
<p>Thanks!</p>
<p><strong><a href="#136" title="2010-11-03 16:08:14">Robert Van Sant</a>:</strong> Thanks so much for this explanation and code sample.  Sometimes I feel Kohana is great and sometimes I feel like why isn&#39;t it easier like CodeIgniter.  I definitely like that it&#39;s strict PHP5 coding, hence why I&#39;m trying very hard to learn the nuances of the Kohana framework.  I have a question in terms of templating and Ajax.  What is the best route to handle this.  Is it a matter of returning the rendered blocks as a response and using a replace JavaScript function to replace that HTML block?  I&#39;ve done this before with other projects.</p>
<p>Thanks in advance for any advice.</p>
<p><strong><a href="#137" title="2010-11-11 10:55:46">Kyuo</a>:</strong> Thanks for this great tutorial! I&#39;m new with user-management, but I see in another user-manager a &quot;Session Manager&quot; with a session database table, here I not understand to handling the sessions. Is this session-table not necessary?</p>
<p>In this time there is no data for &quot;user is online&quot; or &quot;user is offline since ???&quot; or a list of online users. Coming this in a next tutorial? :)</p>
<p><strong><a href="#138" title="2010-11-11 11:12:48">Mikito Takada</a>:</strong> If you want to implement this, there are basically two additional things you need to do:</p>
<p>1: keep track of when the user was last active (e.g. on each page load, update a value somewhere in the database)</p>
<p>2: show users as online if they were active within the last x minutes (e.g. a page load occurred in the last 15 minutes)</p>
<p>Sessions do no need any tables, they are a core functionality of PHP, see <a href="http://www.php.net/manual/en/function.session-start.php">http://www.php.net/manual/en/function.session-start.php</a> and are not stored in the database.</p>
<p>You can keep track of sessions in a table if you want to show other people whether a user is online. However, my focus here is on Auth and user account management, so the I only keep track of the last login (you can see that in the admin interface).</p>
<p>If you want to track user activity, you need to write the additional tracking yourself.</p>
<p><strong><a href="#141" title="2010-11-12 20:51:56">Pedro Sland</a>:</strong> I&#39;ve looked into some of the possabilities myself and I have decided that the best is to use json_encode(array(--vars here--)); For another project I simply wrote a simple array to xml class instead.</p>
<p>If you are using a template controller you will need to do something there not to get the header and footer.</p>
<p><strong><a href="#142" title="2010-11-24 01:54:21">flurry</a>:</strong> hey mikito,</p>
<p>thanks for this realy nice backend and tutorial.
it runs verry well with my kohana 3.0.8 except the
$user-&gt;reset_token function is missing. is this a known bug, or is this a configuration problem from myself?
i will add an additional functionality for validating an email adress by the user after registration, when i have time again.</p>
<p><strong><a href="#143" title="2010-11-25 11:14:15">Mikito Takada</a>:</strong> Hi,</p>
<p>Yes, this is a known problem. I will update the repository with new KO3.0.8 compatible code, the improved schema, plus some added niceties soon.</p>
<p><strong><a href="#144" title="2010-11-25 19:54:49">flurry</a>:</strong> hey,</p>
<p>thanks for the reply. i&#39;m curious about it.</p>
<p><strong><a href="#145" title="2010-12-02 23:18:36">Ralph</a>:</strong> Am I missing something?  I downloaded the source, but the &#39;application/classes/controller&#39; folder is empty aside from a default welcome.php file.  Where are all the controller class files?</p>
<p><strong><a href="#146" title="2010-12-02 23:22:21">Ralph</a>:</strong> Oh wait, talking to myself here--I guess they are in modules/user/</p>
<p><strong><a href="#148" title="2010-12-19 01:22:24">michael</a>:</strong> Hi,
I read your tutorial, which I mainly understand( I think ), but there is one thing that I dont understand, (i am new to Kohana), I thought that you needed to load your module in bootsrap, but I have searched, and havent seen where you did it...</p>
<p>I want to develop a module myself so i was wondering...</p>
<p><strong><a href="#149" title="2010-12-19 01:27:55">Mikito Takada</a>:</strong> Hi,</p>
<p>See <a href="https://bitbucket.org/mixu/useradmin/src/f13a6dc8386d/application/bootstrap.php">https://bitbucket.org/mixu/useradmin/src/f13a6dc8386d/application/bootstrap.php</a> line 80. The module is actually called &quot;user&quot; for now, which reminds me that I should change that to &quot;useradmin&quot; next time I publish an update..</p>
<p><strong><a href="#150" title="2010-12-19 01:32:46">michael</a>:</strong> I just found it, but i was going crazy. I thought i didnt understand.</p>
<p>It just &quot;appeared&quot; because I thought that it was added at the end of the modules list...
But thanks for you fast answer!</p>
<p><strong><a href="#151" title="2010-12-19 01:48:52">michael</a>:</strong> I have another question thought, Why do we need to load the user module before the auth module?</p>
<p>I tried to do a module on my own and &quot;discovered&quot; that it automatically hashed the password...</p>
<p><strong><a href="#152" title="2010-12-19 02:56:12">Mikito Takada</a>:</strong> Module loading order matters because the useradmin module is extending Model_Auth_User.</p>
<p>Otherwise, Kohana will use the barebones user model from:</p>
<p>modules/auth/classes/model/user.php</p>
<p>instead of:</p>
<p>modules/user/classes/model/user.php</p>
<p>If you prefer, you can just copy modules/user/classes/model/user.php to application/classes/model/user.php; then the loading order won&#39;t matter.</p>
<p>Full explanation: <a href="http://kohanaframework.org/guide/about.filesystem">http://kohanaframework.org/guide/about.filesystem</a> and <a href="http://kohanaframework.org/guide/about.flow">http://kohanaframework.org/guide/about.flow</a></p>
<p><strong><a href="#153" title="2010-12-20 21:55:03">Jason</a>:</strong> Oh my god! THANK YOU, I am getting into Kohana and well the most buggery thing is the auth and user controls with roles :D so you have just saved me a arm and a leg and allow me to get knowing kohana from the heart of what i require todo :D</p>
<p>10/10</p>
<p><strong><a href="#155" title="2011-01-20 11:41:32">anton</a>:</strong> Hello Mikito!
I learned your class Model_Useradmin_User and there&#39;s area that i can&#39;t understand.
In method login() you call:
if ($this-&gt;loaded() AND Auth::instance()-&gt;login($this, $array[&#39;password&#39;])) {....
but
Auth::login(...){
...
$this-&gt;_login($username, $password, $remember);
...
}
and _login is abstract method which have to be defined for user.
I tried to find subclass Auth where this and other two abstract method have to be defined but i couldn&#39;t find it. Please help my investigate it.</p>
<p><strong><a href="#156" title="2011-01-20 11:51:00">Mikito Takada</a>:</strong> Hi Anton,</p>
<p>I am using the KO3 core Auth class. And as you can see in /modules/auth/classes /kohana/auth.php function instance(), the actual class is determined by configuration.</p>
<p>Auth can be configured at application/config/auth.php to either use the ORM driver or file driver. The default, and the one I test with is the ORM driver.</p>
<p>The concrete code for login() that is located in /modules/auth/classes/ kohana/auth/orm.php . Note that this is all KO3 core code.</p>
<p><strong><a href="#157" title="2011-01-20 13:33:05">anton</a>:</strong> Ok. I find it. Thank y for halp.</p>
<p><strong><a href="#158" title="2011-01-20 14:12:21">anton</a>:</strong> I have some question about your model. Why did y not write logged_in method and other like Kohana_Auth? Or do y think it&#39;s bad idea and need use Auth::logged_in method in controllers?</p>
<p><strong><a href="#159" title="2011-01-20 14:17:00">anton</a>:</strong> Is it good idea write wrapper Kohana_Auth_Orm::logged_in() method?</p>
<p><strong><a href="#160" title="2011-01-21 23:56:08">Mikito Takada</a>:</strong> Hi,</p>
<p>not sure I understand your question. I&#39;m not writing any wrappers for Auth, because I am not trying to replace the core Auth functionality - I just want to build a module that uses KO3 Core Auth and adds the most commonly used functionality. So I only use/inherit from Auth, and extend the base Auth_User model a little bit in my User model to provide password resets and validation for changing the password after registering.</p>
<p>Why should there be a wrapper for Auth::logged_in? What would be the benefit?</p>
<p><strong><a href="#162" title="2011-02-24 22:30:34">jim</a>:</strong> Hey, nice job you did there, Mikito! Are you going to update the module to work with the newest kohana version (3.1.1)? It would be great!</p>
<p><strong><a href="#163" title="2011-02-24 23:07:57">Mikito Takada</a>:</strong> I am going to release a rather big and awesome update soon with Twitter, Google and Yahoo support as well as a new UI, it&#39;ll be out very soon (a couple of days?).</p>
<p>I will update to 3.1.x at some point, but not immediately as I am swamped with other work and the 3.0.x branch is still working perfectly fine (and is still supported).
Looking at <a href="http://forum.kohanaframework.org/discussion/7793/kohana-3.0-to-3.1-upgrade-troubleshooting">http://forum.kohanaframework.org/discussion/7793/kohana-3.0-to-3.1-upgrade-troubleshooting</a> there are quite a few things to test/debug etc. The main issue is that KO 3.0.x Auth hashes aren&#39;t supported on 3.1.x and I don&#39;t have the time to figure out the migration right now.</p>
<p>Please give it a try yourself if you need to have KO 3.1.x support quickly.</p>
<p><strong><a href="#164" title="2011-02-25 00:13:46">jim</a>:</strong> Can&#39;t wait :) Hope you get it done quick.</p>
<p><strong><a href="#165" title="2011-03-17 08:35:13">anang</a>:</strong> Hi,
Finally I can make your module works for Ko3.1.
I&#39;m not a good coder, and my kohana exprience is minimal, so I don&#39;t know whether my modification is the proper one.</p>
<p>The modification is 1-4 lines per function, except for action_profile_edit, I made a lot of changes.</p>
<p>not sure where to put my code, just ask me I&#39;ll email to who interested.</p>
<p><strong><a href="#166" title="2011-03-17 10:28:37">Mikito Takada</a>:</strong> Hi Anang - send me the code, I&#39;ll merge and publish it on Github. My email is in the form: (firstname).(surname)@gmail.com...</p>
<p><strong><a href="#167" title="2011-04-24 18:45:11">Joe Dwyer</a>:</strong> Mikito, thanks for building and sharing such a great module!</p>
<p>At first I ran into an issue because the driver (stupid me) was set to &quot;File&quot; and needed to be set to &quot;ORM&quot;. That was easy to fix.</p>
<p>Then, it expected the pagination module, which was also pretty easy to add.</p>
<p>Now I&#39;m getting an error saying that &quot;The user_identity property does not exist in the Model_User class&quot;. It looks like that&#39;s related to the outside user identities (Facebook, Google, etc.). Is there a swing table it&#39;s looking for or something? Anything else I need to do to set that up?</p>
<p>Thanks in advance for the help!</p>
<p><strong><a href="#168" title="2011-04-24 18:58:53">Mikito Takada</a>:</strong> Great!</p>
<p>You are probably loading the modules in the wrong order - so the Auth module Model_User is being used instead of the Useradmin module Model_User. The Auth version of Model_User does not have the additional relationships. Recheck your module loading order in bootstrap.php. More info in the &quot;Getting Started with Useradmin&quot; post: <a href="http://blog.mixu.net/2011/01/13/getting-started-with-useradmin-my-kohana-3-auth-admin-module/">http://blog.mixu.net/2011/01/13/getting-started-with-useradmin-my-kohana-3-auth-admin-module/</a></p>
<p>Also, make sure you have the database structure from the SQL file in the module directory (foreign key constraints are not important if it complains about those).</p>
<p>Reading about your troubles reminds me that I should offer a &quot;ready to go&quot; version as well. There used to be one, but heavy Git/Github users prefer pure modules over full applications...</p>
<p><strong><a href="#169" title="2011-04-24 19:12:10">Joe Dwyer</a>:</strong> Mikito! You are awesome! Thanks for the quick response. Looks like it&#39;s working now.</p>
<p>I understand users wanting pure modules, but I agree it&#39;s nice to have a fully &quot;ready to go&quot; version for people who are learning Kohana. It&#39;s much easier to throw something up, see that it works, and then start tweaking. When the tweaks break something... it&#39;s pretty easy to figure out what happened. But when you can&#39;t get it to work in the first place, it&#39;s much harder to figure out where the error is. After I get more used to Kohana, I suspect that won&#39;t be as much of an issue, though...</p>
<p>Have a great weekend!</p>
<p><strong><a href="#170" title="2011-04-25 15:06:49">John Rushworth</a>:</strong> You have my undying love and gratitude. This is awesome!!! Exactly what was needed at exactly the right time. Thank-you very much for a GREAT job, stunningly executed. I had a few minor issues... not sure if they are typical or not... like user.last_failed_login and user.modified needing default values.... but this was as painless as it comes... and it does EXACTLY what it said on the box. Thanks again. Many karmic hugs.</p>
<p><strong><a href="#171" title="2011-06-12 23:47:17">anon</a>:</strong> I have done everything described above but I am getting 404 error when I want to see x/user/login. &#39;x&#39; is my base url. I cant understand why my default route does not catch the uri. I have declared the user module before the auth module.
My default route is:
...
Route::set(&#39;x/user&#39;, &#39;user(/(/))&#39;)
    -&gt;defaults(array(
        &#39;controller&#39; =&gt; &#39;user&#39;,
        &#39;action&#39; =&gt; &#39;index&#39;,
        &#39;id&#39; =&gt; NULL,
));
Route::set(&#39;default&#39;, &#39;((/(/)))&#39;)
    -&gt;defaults(array(
        &#39;controller&#39; =&gt; &#39;main&#39;,
        &#39;action&#39;     =&gt; &#39;index&#39;,
    ));</p>
<p><strong><a href="#172" title="2011-06-28 23:52:46">Guidouil</a>:</strong> Great Job, using it for my project and loving it :D
There is jeust a little challenge regarding the auto_login part with a cookie, as you say the kohana auth module handle it very well but there is a little problem with your database. The token field in the user_tokens table should be a varchar(40) and not 32.
It now works better for me ^^
Thank you very much once again, keep up enhancing the stuff, I&#39;m planning to fork it sometime ;)</p>
<p><strong><a href="#173" title="2011-10-30 15:07:34">Craig</a>:</strong> Hi I&#39;m trying to find the folder /modules/user in the github repository as mentioned in the post but I cannot seem to see this folder.</p>
<p>Can anyone give me any pointers where this module is?</p>
<p>Thanks in advance</p>
<p><strong><a href="#174" title="2011-12-18 00:10:36">Daniel Iser</a>:</strong> Here&#39;s the way I worked out for apps with heavy Ajax usage. Rather than having to duplicate a lot of actions I set my main controller to detect if it was an Ajax request. If it was set the template to an json encoded output.</p>
<p>In my actions I prepare all values into the same variables for each $values, $errors, $messages etc.</p>
<p>The Json view combines $values, $errors and $messages into a single array and runs it through json_encode and prints it.</p>
<p>Doing it this way you have less code to write and it&#39;s easier to maintain when you have to make changes.</p>
<p><strong><a href="#175" title="2012-01-26 20:36:54">Anuruddha</a>:</strong> Hi, I am a newbie to Kohana, and was trying to setup this as my starting point. I&#39;ve downloaded the code from github, but wasn&#39;t successful in getting this running in my local. Is there any documentation about how to set this up? Or would you be able to give me the steps required for setting the code?
Thanks A LOT in advance!</p>
<p><strong><a href="#176" title="2012-03-08 22:23:46">Casper</a>:</strong> @Guidouil, thank you so much for your comment.</p>
<p><strong><a href="#177" title="2012-03-29 18:40:42">iPoul</a>:</strong> Hi, i was wondering if its possible to use the Auth Module without the use of roles ? or am i bound to use them, unless i want to rewrite the module or make my own ?</p>
<p>Kind regards, iPoul</p>
<p><strong><a href="#178" title="2012-05-19 17:17:51">Bojan</a>:</strong> Hi, I&#39;m having the same problem as Joe Dwyer, but my bootstrap is fine I think.</p>
<p>The user_identity property does not exist in the Model_User class</p>
<p>The problem is when I use pagination (admin_user).</p>
<p>Kohana::modules(array(
    &#39;useradmin&#39; =&gt; MODPATH . &#39;useradmin&#39;, // Mixu&#39;s useradmin module
    &#39;auth&#39; =&gt; MODPATH . &#39;auth&#39;, // Basic authentication
multiple backends
    &#39;database&#39; =&gt; MODPATH . &#39;database&#39;, // Database access
    &#39;orm&#39; =&gt; MODPATH . &#39;orm&#39;, // Object Relationship Mapping
    &#39;pagination&#39; =&gt; MODPATH . &#39;pagination&#39;, // pagination
));</p>
<p>&quot;Ready to go&quot; would be awesome!</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Tue, 14 Sep 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[Kohana 3 auth: the auth module functionality]]></title><description><![CDATA[<p>The Kohana 3 Auth model implements a set of basic functionality for authentication (login) and authorization (user rights based on roles). In this series of posts, I will discuss:</p>
<p><ol>
    <li><a href="http://blog.mixu.net/2010/09/06/step-by-step-guide-to-kohana-3-auth/">Setting up the basic Auth in KO3</a> (part 1)</li>
    <li>An overview of the functionality provided by the Auth module (part 2; this part)</li>
    <li><a href="http://blog.mixu.net/2010/09/14/kohana-3-auth-sample-implementation-and-documentation/">Tips on implementing Auth in a custom application</a> (part 3)</li>
</ol>
In this second post in the series I will discuss the different functionality provided by the Auth module.</p>
<p><strong>An overview of the files in the KO3 Auth module:</strong></p>
<p><ul>
    <li>modules/auth/classes/kohana/auth/file.php - contains the file driver for Auth.</li>
    <li>modules/auth/classes/kohana/auth/orm.php - contains the ORM driver for Auth.</li>
    <li>modules/auth/classes/kohana/auth.php - implements the Auth singleton.</li>
    <li>modules/auth/classes/model/auth/user.php - User model (Model_Auth_User).</li>
    <li>modules/auth/classes/model/auth/role.php - Role model (Model_Auth_Role).</li>
    <li>modules/auth/classes/model/auth/user/token.php - User_token model (Model_Auth_User_Token).</li>
    <li>modules/auth/config/auth.php - Auth module configuration.</li>
</ul>
<strong>Different drivers: File and ORM</strong></p>
<p>There are two different drivers for Auth. The ORM driver is most commonly used, and it stores and retrieves data in the database. The File driver is the alternative, which stores credentials in the auth module config file.</p>
<p><strong> ORM functionality vs. Auth functionality</strong></p>
<p>It is important to note that the Auth class models (user, role, token) extend the ORM base class. This means that all the ORM methods can be used e.g. to retrieve users using different conditions in the same way as other ORM models would.</p>
<p>Have a look at the ORM documentation for specifics.  The Auth functionality for the ORM driver is built upon the ORM, and it uses the existing functionality such as relationships ($_has_many), validation rules ($_rules, $_ignored_columns), callbacks ($_callbacks).</p>
<p>Much of what you will be doing with the users model will be adding extended information such as new relationships and new fields. As long as you keep the default relationships, rules and field names, you will be able to flexibly extend the user model to suit your needs.</p>
<p><strong>The Auth singleton</strong></p>
<p>Auth class (/modules/auth/classes/kohana/auth/orm.php):</p>
<p><ul>
    <li>Auth::instance(). Retrieves the instance of the Auth singleton.</li>
    <li>logged_in($role = NULL). If called without arguments, checks whether the user is logged in. If an argument is given, then checks whether the logged in  user has the given role (string/Role object) or roles (array of strings / Role objects).</li>
    <li>get_user(). Retrieves the user model for the user who is currently logged in (or FALSE).</li>
    <li>login(array &amp; $array, $redirect = FALSE). The array should contain the password and username. If the redirect parameter is set, then the login will be redirected to the given URL.</li>
    <li>logout(). Logs the current user out.</li>
    <li>force_login($username). Forces the username given as the first argument to log in - without a password.</li>
    <li>auto_login(). Logs in the user automatically.</li>
</ul>
<strong>The User model</strong></p>
<p>Model_Auth_User defines two relationships:</p>
<pre class="hljs"><code><span class="hljs-comment">// Relationships</span>
<span class="hljs-keyword">protected</span> <span class="hljs-variable">$_has_many</span> <span class="hljs-subst">=</span> <span class="hljs-built_in">array</span>
(
    <span class="hljs-string">&#39;user_tokens&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(<span class="hljs-string">&#39;model&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;user_token&#39;</span>),
    <span class="hljs-string">&#39;roles&#39;</span>       <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(<span class="hljs-string">&#39;model&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;role&#39;</span>, <span class="hljs-string">&#39;through&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;roles_users&#39;</span>),
);</code></pre><p>These relationships connect the user to Roles and tokens. Roles are particular sets of rights, such as &quot;admin&quot;. Tokens are used for two purposes: automatic login using cookies and password reset using password reset tokens. A user can have multiple tokens.</p>
<p>Model_Auth_User defines additional rules and callbacks for the username, email and password fields.</p>
<pre class="hljs"><code>    <span class="hljs-comment">// Rules</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$<em>rules</span> <span class="hljs-subst">=</span> <span class="hljs-built_in">array</span>
    (
        <span class="hljs-string">&#39;username&#39;</span>            <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>
        (
            <span class="hljs-string">&#39;not_empty&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">NULL</span>,
            <span class="hljs-string">&#39;min_length&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(<span class="hljs-number">4</span>),
            <span class="hljs-string">&#39;max_length&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(<span class="hljs-number">32</span>),
            <span class="hljs-string">&#39;regex&#39;</span>            <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(<span class="hljs-string">&#39;/^[-pLpN</em>.]++$/uD&#39;</span>),
        ),
        <span class="hljs-string">&#39;password&#39;</span>            <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>
        (
            <span class="hljs-string">&#39;not_empty&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">NULL</span>,
            <span class="hljs-string">&#39;min_length&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(<span class="hljs-number">5</span>),
            <span class="hljs-string">&#39;max_length&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(<span class="hljs-number">42</span>),
        ),
        <span class="hljs-string">&#39;password_confirm&#39;</span>    <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>
        (
            <span class="hljs-string">&#39;matches&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(<span class="hljs-string">&#39;password&#39;</span>),
        ),
        <span class="hljs-string">&#39;email&#39;</span>                <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>
        (
            <span class="hljs-string">&#39;not_empty&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">NULL</span>,
            <span class="hljs-string">&#39;min_length&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(<span class="hljs-number">4</span>),
            <span class="hljs-string">&#39;max_length&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(<span class="hljs-number">127</span>),
            <span class="hljs-string">&#39;validate::email&#39;</span>    <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">NULL</span>,
        ),
    );</code></pre><p>It also provides a number of functions:</p>
<p><ul>
    <li>login(). First argument is an array containing username and password, the second argument is an optional URL to redirect to.</li>
    <li>change_password(). Allows the password to be changed. First argument is an array containing password and password_confirm, second is an optional URL which if given causes the value to be saved immediately and redirected to the given URL.</li>
    <li>username_available(). A callback used in the validation process which checks that the username is available when creating a user.</li>
    <li>email_available(). A callback used in the validation process which checks that the email address is unique.</li>
    <li>save(). A save() function that causes the password to be hashed before saving if it was changed.</li>
</ul>
<strong>The Role model</strong></p>
<p>Roles have a name and a description (a line of text). They are associated with users through the roles_users table. The model does not implement any functions, only a number of rules stored in $_rules.</p>
<p><strong>The User_token model</strong></p>
<p>User_tokens have a unique token and an expiry date. The token can be generated by using create_token() and housekeeping (removing the expired tokens) can be performed using delete_expired(). When the token is saved, the user agent of the current request is saved.</p>
<p>Tokens are essentially unique authorizations either related to password resets or to auto login.</p>
<h2 id="comments">Comments</h2>
<p><strong><a href="#122" title="2010-09-12 09:13:07">codeho</a>:</strong> Hey thanks for your explanation.
i was wondering if you know how i can get a users role into the user object,
so that i can check for it in the controller.</p>
<p>thanks</p>
<p><strong><a href="#123" title="2010-09-13 21:28:24">Jasper</a>:</strong> Hi, I really love your tutorial over here. I cant wait to experiment with it, so I hope the 3rd part will be online soon. Thanks!</p>
<p><strong><a href="#125" title="2010-10-19 20:49:49">Diwant Vaidya</a>:</strong> Mixu, ty for the article.</p>
<p>codeho, try doing Auth::instance()-&gt;get_user()-&gt;roles-&gt;find_all()  which you can do from inside your controller.  It will get you all the roles the user has.</p>
<p><strong><a href="#128" title="2012-01-05 14:51:05">Kostas</a>:</strong> Hello,
How can I change the password for a user when using the file driver?</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Tue, 07 Sep 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[Step-by-step guide to Kohana 3 auth]]></title><description><![CDATA[<p>The Kohana 3 Auth model implements a set of basic functionality for authentication (login) and authorization (user rights based on roles). In this series of posts, I will discuss:</p>
<p><ol>
    <li>Setting up the basic Auth in KO3 (part 1; this part)</li>
    <li><a href="http://blog.mixu.net/2010/09/07/kohana-3-auth-the-auth-module-functionality/">An overview of the functionality provided by the Auth module</a> (part 2)</li>
    <li><a href="http://blog.mixu.net/2010/09/14/kohana-3-auth-sample-implementation-and-documentation/">Tips on implementing Auth in a custom application</a> (part 3)</li>
</ol>
This first post in the series I will discuss setting up KO3 Auth.</p>
<p><span style="text-decoration: underline;">UPDATED March 2011: now covers the steps for Kohana 3.1</span></p>
<p><strong>1. Enable the Auth module in Kohana3</strong></p>
<p>Open application/bootstrap.php and uncomment the auth, database and orm modules:</p>
<pre class="hljs"><code>Kohana<span class="hljs-tag">::modules</span>(<span class="hljs-built_in">array</span>(
     <span class="hljs-string">&#39;auth&#39;</span>       <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; MODPATH<span class="hljs-built_in">.<span class="hljs-variable">&#39;auth&#39;</span></span>,       <span class="hljs-comment">// Basic authentication</span>
    <span class="hljs-string">&#39;database&#39;</span>   <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; MODPATH<span class="hljs-built_in">.<span class="hljs-variable">&#39;database&#39;</span></span>,   <span class="hljs-comment">// Database access</span>
    <span class="hljs-string">&#39;orm&#39;</span>        <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; MODPATH<span class="hljs-built_in">.<span class="hljs-variable">&#39;orm&#39;</span></span>,        <span class="hljs-comment">// Object Relationship Mapping</span>
    ));</code></pre><p>You don&#39;t have to use ORM with Auth (the default driver is &quot;file&quot;), but many people do.</p>
<p><strong>2. If you haven&#39;t done it earlier, setup the database</strong></p>
<p>Copy modules/database/config/database.php to application/config/. Set the username, password, database and host on in the file.</p>
<p><strong>3. Create the database tables</strong></p>
<p>You can find <a href="http://docs.kohanaphp.com/addons/auth#mysql_schema">the database schema on the Kohana wiki</a> or from modules/orm/auth-schema-mysql.sql.</p>
<p>Note that the password column should be CHAR(64) for sha256.</p>
<p><strong>4. Configure the hash_key for Kohana 3.1.x</strong></p>
<p>Copy modules/auth/config/auth.php to application/config/. This will override the default settings.</p>
<p>In Kohana 3.1, the default hash method is now sha256 instead of sha1. This means that there is no salt_pattern; and that old KO 3.x passwords are not compatible with KO 3.1! See <a href="http://dev.kohanaframework.org/issues/3163">the discussion on this bug for more information</a>. TL;DR: the salt pattern is weak, so if someone steals your database but does not know your salt_key, they can deduce it easily and perform a dictionary attack.</p>
<p>Instead, you need to configure your hash_key which gets passed to <a href="http://php.net/manual/en/function.hash-hmac.php">http://php.net/manual/en/function.hash-hmac.php</a>. You can also use any of the hast_hmac() supported algorithms if you want to.</p>
<p>Use a random hash_key, for example from: <a href="https://www.grc.com/passwords.htm">https://www.grc.com/passwords.htm</a></p>
<p><span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace; font-size: 12px; line-height: 18px; white-space: pre;"> return array</span></p>
<pre class="hljs"><code>(
    <span class="hljs-string">&#39;driver&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;ORM&#39;</span>,
    <span class="hljs-string">&#39;hash_method&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;sha256&#39;</span>,
    <span class="hljs-string">&#39;hash_key&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">NULL</span>, <span class="hljs-comment">// replace with random string</span>
    <span class="hljs-string">&#39;lifetime&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-number">1209600</span>,
    <span class="hljs-string">&#39;session_key&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-string">&#39;auth_user&#39;</span>,
    <span class="hljs-string">&#39;users&#39;</span> <span class="hljs-subst">=&amp;</span><span class="hljs-literal">gt</span>; <span class="hljs-built_in">array</span>(),
);</code></pre><p><strong>5. Next steps: implement login, logout, user role checking and so on...</strong></p>
<p>Now you have enabled the basic auth functionality. Next you have to actually perform the checks for whether the user is logged in and whether they have the correct rights. You will also want to implement functionality for the user to log in and log out as well as to view/edit/delete their profile, change/reset their password and for administrative functionality.</p>
<p>I have provided my own implementation for this functionality, which I will look into in part 3 of this series. You can download the implementation and use it as a basis of your work - please leave a comment and send improvements back if possible.</p>
<p>If you want to implement the functionality yourself, I have discussed the main functionality provided by Auth in part 2 of this series.</p>
<p><strong>Other Kohana Auth tutorials (NOTE Kohana 3.x):</strong></p>
<ul>
    <li><a href="http://www.nanodocumet.com/?p=26">Kohana 3: AUTH, A2 &amp; ACL</a> (nanodocumet.com)</li>
    <li><a href="http://kohanaes.com.ar/?p=3">Spanish (?) tutorial on Auth</a></li>
</ul>

<h2 id="comments">Comments</h2>
<p><strong><a href="#93" title="2011-03-16 20:50:01">Christher</a>:</strong> Nice. But what have happend to the Auth module?
There is now ORM or salt_pattern?</p>
<p><strong><a href="#94" title="2011-05-12 19:08:59">Andrzej Ośmiałowski</a>:</strong> It&#39;s now part of the ORM. Check it our: /ORM/classes/kohana/auth/orm.php.</p>
<p>@author - Depending on your needs, you should consider using sha512 instead of sha256.</p>
<p><strong><a href="#95" title="2011-07-29 13:33:55">Ilyas Kazi</a>:</strong> Have u checked with Kohana 3.2 framework. It&#39;s seem to be quite different from what you are explaining here..</p>
<p>Do u hv any plan for kohana 3.2 authentication example ?</p>
<p><strong><a href="#96" title="2011-08-25 22:39:05">jturo</a>:</strong> Well the post is based on 3.1, i, have you tried installing the 3.2 if so what was your experience like? from what i understand this is pretty much the same, the hash method is using a hash_hmac concatenating the string with the hash_key using the hash method defined in the configuration file.</p>
<p><strong><a href="#97" title="2011-08-25 22:40:12">jturo</a>:</strong> @lyas Kazi: Well the post is based on 3.1, i, have you tried installing the 3.2 if so what was your experience like? from what i understand this is pretty much the same, the hash method is using a hash_hmac concatenating the string with the hash_key using the hash method defined in the configuration file.</p>
<p><strong><a href="#98" title="2011-09-12 11:23:37">Arte</a>:</strong> And what if you want to rename your user table into something different? instead of users, you want to have &quot;admins&quot;?</p>
<p><strong><a href="#99" title="2011-12-22 18:16:12">Pad</a>:</strong> Nice series of tuto.</p>
<p>I will use this as a basis to my learning of Kohana, i appreciate your work and how you present it.</p>
<p>Thanks, i&#39;ll put a link when my website will be on back to your work. I&#39;ll tell you when it comes..</p>
<p>See ya.</p>
<p><strong><a href="#100" title="2012-01-06 22:12:31">William Murray</a>:</strong> I&#39;m using Kohana 3.2 and setting up the Auth module using ORM. I was having trouble with the login and found that the Auth SQL on the wiki (linked to from this page) is setting the password field in the user table to have a length of 50. However, the sha256 hashed password will generate a 64 character string. The Auth SQL needs to be fixed to set the password field length to 64 characters.</p>
<p><strong><a href="#101" title="2012-01-06 22:13:48">William Murray</a>:</strong> Sorry, I just noticed that step 3 says to change the password to char(64). Ignore my previous post.</p>
<p><strong><a href="#103" title="2012-01-30 23:59:52">Antoine Lépée</a>:</strong> Ok ! You just saved me a lot time with your comments :)</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Mon, 06 Sep 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[Mercurial tips for developers: subrepositories, finding a deleted file and a lot more]]></title><description><![CDATA[<p>Here are my Mercurial tips for individual developers:</p>
<h2>Basic configuration</h2>
<strong>Linux with Gnome</strong>

<code>ini
[ui]
username = Firstname Surname &amp;lt;firstname.surname@gmail.com&amp;gt;
merge = meld
[extensions]
hgext.extdiff=
hgext.bookmarks =
hggit =
[extdiff]
cmd.vdiff = meld
&lt;span style=&quot;font-family: Georgia, &#39;Times New Roman&#39;, &#39;Bitstream Charter&#39;, Times, serif; font-size: 13px; line-height: 19px; white-space: normal;&quot;&gt;[/codesyntax]&lt;/span&gt;</code>

<strong>MacOSX</strong>

See <a href="http://mercurial.selenic.com/wiki/MacOSXFileMerge">this guide</a>.

<strong>Windows</strong>

Use WinMerge.
<h2>Find a deleted file</h2>

<pre class="hljs"><code>hg log --<span class="hljs-keyword">template</span> <span class="hljs-string">&quot;{rev}: {file_dels}n&quot;</span></code></pre><p>Using find in Windows:</p>
<pre class="hljs"><code>hg log --<span class="hljs-keyword">template</span> <span class="hljs-string">&quot;{rev}: {file_dels}n&quot;</span> | find /n <span class="hljs-string">&quot;filename&quot;</span></code></pre><p>(From <a href="http://stackoverflow.com/questions/1013550/find-deleted-files-in-mercurial-repository-history-quickly">Stackoverflow</a>.)</p>
<p><h2>Useful variations of basic commands</h2>
<strong>General options</strong></p>
<p>Most hg commands support the --dry-run parameter which is useful for testing what would happen without actually doing anything:</p>
<pre class="hljs"><code>-n, --dry-run (<span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> perform actions, just <span class="hljs-built_in">print</span> output)</code></pre><p><strong>Log and status commands</strong></p>
<pre class="hljs"><code>hg <span class="hljs-built_in">log</span> -<span class="hljs-keyword">r</span> tip (tip changelog)
hg <span class="hljs-built_in">log</span> -<span class="hljs-keyword">l</span> <span class="hljs-number">5</span> (<span class="hljs-keyword">last</span> <span class="hljs-number">5</span> changelog statuses)
hg status -<span class="hljs-keyword">m</span> (show modified <span class="hljs-keyword">files</span> <span class="hljs-keyword">only</span>)
hg status -<span class="hljs-keyword">r</span> (show removed <span class="hljs-keyword">files</span> <span class="hljs-keyword">only</span>)
hg status -<span class="hljs-keyword">a</span> (show added <span class="hljs-keyword">files</span> <span class="hljs-keyword">only</span>)</code></pre><p><strong>Add, remove, file renames (addremove)</strong></p>
<pre class="hljs"><code>hg <span class="hljs-built_in">remove</span> --after (<span class="hljs-keyword">mark</span> <span class="hljs-keyword">all</span> deleted <span class="hljs-keyword">files</span> <span class="hljs-keyword">as</span> really removed)
hg addremove --similarity <span class="hljs-number">100</span>
(automatically detect <span class="hljs-keyword">files</span> that are <span class="hljs-number">100</span>% similar <span class="hljs-keyword">as</span> renamed)</code></pre><p><strong>Commit, push, pull</strong></p>
<pre class="hljs"><code>hg commit -m <span class="hljs-string">&quot;commit message&quot;</span> (commit <span class="hljs-keyword">without</span> triggering <span class="hljs-operator">the</span> editor)
hg push <span class="hljs-comment">--debug -v ssh://hg@bitbucket.org/usernamehere/reponamehere</span>
(verbose output <span class="hljs-keyword">for</span> <span class="hljs-operator">a</span> push <span class="hljs-built_in">to</span> deter <span class="hljs-operator">the</span> impatient <span class="hljs-built_in">from</span> cancelling)</code></pre><p><strong>Grep</strong></p>
<pre class="hljs"><code><span class="hljs-title">hg</span> grep PATTERN</code></pre><p>By default, grep only prints output for the first revision of a file in which it finds a match:</p>
<pre class="hljs"><code><span class="hljs-subst">--</span><span class="hljs-literal">all</span>    print <span class="hljs-literal">all</span> revisions that <span class="hljs-keyword">match</span> <span class="hljs-literal">and</span>
<span class="hljs-attribute">-i</span>, <span class="hljs-subst">--</span>ignore<span class="hljs-attribute">-case</span> <span class="hljs-keyword">to</span> ignore <span class="hljs-keyword">case</span></code></pre><p><strong>Reverting to an old revision</strong></p>
<p>Use <em>update </em>to do this for the whole repository:</p>
<pre class="hljs"><code><span class="hljs-title">hg</span> update -r REVISION</code></pre><p>If you are fine with clobbering the existing files, use:</p>
<pre class="hljs"><code><span class="hljs-title">hg</span> update -C REVISION</code></pre><p>Use <em>revert</em> to do this for an individual file:</p>
<pre class="hljs"><code><span class="hljs-title">hg</span> revert -r REVISION FILENAME</code></pre><p>You can also use -d to revert or update to the version that was last committed on a particular date.</p>
<p><h2>Implementing subrepositories</h2>
Subrepositories are useful for things like libraries within a project, if you want to maintain a library repo separately from the rest of the code.</p>
<p>There are three different options for working with subrepositories:</p>
<p><ol>
    <li>Use the subrepos functionality built into Mercurial.</p>
<p><ul>
    <li>Pros: built in.</li>
    <li>Cons: sparsely documented and not feature-complete (see <a href="http://mercurial.selenic.com/wiki/subrepos#Caveats">Caveats here</a>).</li>
    <li>Link: <a href="http://stackoverflow.com/questions/2083393/mercurial-subrepos-how-do-you-create-them-and-how-do-they-work">http://stackoverflow.com/questions/2083393/mercurial-subrepos-how-do-you-create-them-and-how-do-they-work</a></li>
</ul>
</li>
    <li>Use <a href="http://en.wikipedia.org/wiki/Symbolic_link">symlinks</a>.</p>
<p><ul>
    <li>Pros: uses core Mercurial features, built into OS (Linuxes but also Windows), possibly more flexible than normal solution, Mercurial will treat symlinked directories just like regular directories.</li>
    <li>Cons: Mercurial will treat symlinked directories just like regular directories.</li>
</ul>
</li>
    <li>Use a bash script and an ignore file to create subrepos.</p>
<p><ul>
    <li>Pros: uses core Mercurial features.</li>
    <li>Cons: script involves renaming stuff temporarily.</li>
    <li>Link: <a href="http://rustyklophaus.com/articles/20100124-SubmodulesAndSubreposDoneRight.html">http://rustyklophaus.com/articles/20100124-SubmodulesAndSubreposDoneRight.html</a></li>
</ul>
</li>
</ol>
I chose the second alternative: using symlinks to link folders in subrepos to the main repository.</p>
<p><strong>How to setup the symbolic links:</strong></p>
<p>You can do this simply by moving the library files to another directory, starting a new repo (if you want the history, see the next tip) and then creating <a href="http://en.wikipedia.org/wiki/Symbolic_link">symlinks </a> from the original location back to the new repository location. On Windows, you can use <a href="http://www.rekenwonder.com/linkmagic.htm">Junction Link Magic </a>for the symbolic links.</p>
<p><strong>Benefits:</strong></p>
<p>The main benefit is that I can flexibly select a couple of key directories to include in the main project, while keeping the side project with its own repo.</p>
<p>The main repository will store the subrepo files as they were at the time of commit, and subrepository can have more detailed history than main repository. This has the benefit of being able to store the state of the whole project, while still doing more granular updates on the subrepo between main repo commits.</p>
<p><h2>Separating libraries to their own directories using the convert extension</h2>
<a href="http://hgtip.com/tips/advanced/2009-11-16-using-convert-to-decompose-your-repository/  ">http://hgtip.com/tips/advanced/2009-11-16-using-convert-to-decompose-your-repository/</a></p>
<p><h2>Creating a git mirror</h2>
<a href="http://hgtip.com/tips/advanced/2009-11-09-create-a-git-mirror/  ">http://hgtip.com/tips/advanced/2009-11-09-create-a-git-mirror/</a></p>
<p><h2>Configuring bitbucket</h2>
<a href="http://hgtip.com/tips/advanced/2009-11-09-create-a-git-mirror/  ">http://hgtip.com/tips/advanced/2009-10-01-configuring-user-auth-https/</a></p>
<p><h2>Detecting renames automatically</h2>
<a href="http://hgtip.com/tips/advanced/2009-09-30-detecting-renames-automatically/">http://hgtip.com/tips/advanced/2009-09-30-detecting-renames-automatically/</a></p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Wed, 04 Aug 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[Kohana3: Setting up phpUnit and phpDocumentor]]></title><description><![CDATA[<p>Here is my quick guide on how to setup <a href="http://www.phpunit.de/manual/3.4/en/index.html">phpUnit</a> and <a href="http://manual.phpdoc.org/HTMLframesConverter/default/">phpDoc </a>for <a href="http://kohanaframework.org/">Kohana 3</a>.</p>
<p><h2>phpUnit</h2></p>
<p><h3>1. Setup</h3>
Install phpUnit using pear:</p>
<pre class="hljs"><code><span class="hljs-title">pear</span> install phpunit</code></pre><p>(See the PEAR site for <a href="http://pear.php.net/manual/en/installation.getting.php">how to install PEAR</a>.)
Get the Kohana unittest module from <a href="http://github.com/kohana/unittest">http://github.com/kohana/unittest</a>. If you aren&#39;t using git for your repo, just clone the files (<code>git clone <a href="http://github.com/kohana/unittest.git">http://github.com/kohana/unittest.git</a></code>), get rid of the .git subdirectories and copy the module to your modules/ directory.</p>
<p><a href="http://github.com/kohana/unittest">Follow the setup instructions on GitHub</a>. Some tips:</p>
<p>It may be easiest to define an alternative default database configuration, since currently unittest does not automatically change any of the database configurations (ex. in models). Since I use a Fedora VM for development but prefer to run tests on Windows, I added the following logic to config/database.php:</p>
<p><pre lang="php">if (strtoupper(substr(PHP_OS, 0, 3)) === &#39;WIN&#39;) {
return array(&#39;default&#39; =&gt; ..test config..);
} else {
return array(&#39;default&#39; =&gt; ..normal config..);
}</pre>
I did the same thing in bootstrap.php, selectively enabling the unittest module and changing the cache dir based on the OS. You can probably think of some way to do the same in your setup even if you aren&#39;t using a different OS for serving HTTP requests.</p>
<p><h3>2. Creating tests</h3>
Tests for application files go into the application/tests/ folder you create.</p>
<p>Tests for any module (inc. application, database, unittest etc.) go in the &#39;tests&#39; folder in the module.</p>
<p>Tests extend Kohana_Unittest_TestCase, not PHPUnit_Framework_TestCase.</p>
<p>To group individual tests into modules you need to add the tests to a group for that module. The convention for group names is modules.{module_name}. This is done using the docblock @group specification (can have multiple group specifications). See <a href="http://github.com/kohana/unittest/blob/master/guide/unittest.testing.md">Writing Tests in the repo on GitHub</a>.</p>
<p><h3>3. Fixtures</h3>
The easiest way to create fixtures is to use setUp() to set the DB, then tearDown() to clean up. You can just use the DB class, or use ORM to add the records. Example:</p>
<p><pre lang="php">class WhateverTest extends Kohana_Unittest_TestCase {
   function setUp() {
      // setup the DB
      DB::query(NULL, &quot;TRUNCATE <code>kohana_test</code>.<code>whatever</code>;&quot;)-&gt;execute();
      $fixture_rows = array(
          array(
            &#39;key&#39; =&gt; &#39;billing_key&#39;,
            &#39;value&#39; =&gt; &#39;0&#39;,
          ),
      );
      // add the necessary items
      foreach($fixture_rows as $row) {
         DB::insert(&#39;whatever&#39;, array_keys($row))-&gt;values(array_values($row))-&gt;execute();
      }
   }
   function tearDown() {
   }</pre>
There is probably a better way using a proper fixture class, but I haven&#39;t seen one for Kohana yet.</p>
<p><h3>4. Execution</h3>
You will need to specify the path to the KO3 webroot index.php as the bootstrap for phpUnit. This is because the dependencies which your code has need to be loaded by Kohana.</p>
<p>By default, all tests in application/tests/ will be run.</p>
<pre class="hljs"><code>phpunit <span class="hljs-comment">--bootstrap=index.php ./modules/unittest/tests.php</span></code></pre><p>To run a specific group of tests on the cli add --group {groupname.in.testfile} between the --bootstrap switch and the path to the tests folder.</p>
<pre class="hljs"><code>phpunit --bootstrap=<span class="hljs-keyword">index</span>.php --<span class="hljs-keyword">group</span> groupname.<span class="hljs-keyword">in</span>.testfile ./modules/unittest/tests.php</code></pre><p><h2>phpDocumentor</h2>
Install phpDocumentor using PEAR: <code>pear install phpDocumentor</code>.</p>
<p>On Windows, if you use paths with spaces in them it is easiest to make sure that phpDocumentor is in the php include path (edit php.ini if necessary), and invoke php while passing the phpdoc file directly (see below for example).</p>
<p>You will probably only want to generate API docs for application/, perhaps selectively adding a few modules. And you probably want to exclude: application/vendor/, application/logs/, application/views/, application/bootstrap.php and application/config/ from the API documentation.</p>
<p>Remember that <a href="http://blog.mixu.net/2009/09/09/phpdocumentor-1-4-3-gotchas/">phpDocumentor does not support multiple option specifications</a>: you have to join the paths with a comma. Furthermore, remember to have the directory separator character at the end of directories to trigger the correct interpretation.</p>
<p>Kohana3 uses a number of custom tags, so you will want to exclude those. Here is a sample run:</p>
<pre class="hljs"><code>php <span class="hljs-string">&quot;c:Program Files (x86)PEARphpdoc&quot;</span> --directory application/
--ignore application<span class="hljs-regexp">/vendor/</span>,application<span class="hljs-regexp">/logs/</span>,application<span class="hljs-regexp">/views/</span>,application<span class="hljs-regexp">/bootstrap.php,application/config/</span> --target doc/api
--customtags type,<span class="hljs-reserved">default</span>,constructor,chainable,<span class="hljs-class"><span class="hljs-keyword">class</span>,<span class="hljs-title">namespace</span>,<span class="hljs-title">module</span>,<span class="hljs-title">group</span></span></code></pre><p>There are a few options that may also prove useful:
--parseprivate causes private methods to be shown
--output HTML:frames:earthli changes the output to earthli, which I like.
--undocumentedelements Adds warnings to errors.html for undocumented elements.</p>
<h2 id="comments">Comments</h2>
<p><strong><a href="#243" title="2011-06-14 17:08:19">Willian</a>:</strong> Thank you very much. It&#39;s hard to find this kind of thing ...</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Sun, 25 Jul 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[Better web application interface markup: lessons from theme frameworks]]></title><description><![CDATA[<p>Every time I start a new web application project, I spend a while (re)thinking what the layout structure should be in terms of CSS and HTML (e.g. <a href="http://blog.mixu.net/2009/08/12/semantic-css-naming-best-practices/">semantic naming</a>, <a href="http://blog.mixu.net/2010/03/15/7-additional-tips-for-css-markup/">organizing CSS markup</a>).</p>
<p>Recently, I did a project using the <a href="http://themeshaper.com/thematic/">Thematic </a>theme framework for Wordpress, and that got me thinking about how custom web applications interfaces could be improved. As an individual developer, I rarely have the luxury of focusing on the details of the layout. In contrast, the developers building theme frameworks have spent years thinking about how to create a generic, extensible structure for web application interfaces.</p>
<p>I had a look at <a href="http://themeshaper.com/thematic/">Thematic</a>, <a href="http://wpframework.com/">WP-Framework</a> and <a href="http://themehybrid.com/">Theme Hybrid</a> (see more frameworks <a href="http://www.smashingmagazine.com/2009/05/27/wordpress-theme-development-frameworks/">in this Smashing Magazine article</a>). I used Thematic, since I ended up using it in the Wordpress project I did. Here is how Thematic does it&#39;s HTML layout:</p>
<p><strong>An overview of the HTML code (based on Thematic)</strong></p>
<p>I think the most interest parts of Thematic for web application design are the HTML structure, use of ids and classes and the CSS files. The hook-and-filter system (<a href="http://bluemandala.com/thematic/thematic-structure.html">overview here</a>) is less interesting from the web application point of view, since you will most likely be writing all of the code from scratch for your own web applications.</p>
<pre class="hljs"><code><span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;<span class="hljs-subst">!</span>doctype html<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
<span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;html<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
   <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;head<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
      <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;title<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/title<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
      <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;meta http<span class="hljs-attribute">-equiv</span><span class="hljs-subst">=</span><span class="hljs-string">&quot;Content-Type&quot;</span> content<span class="hljs-subst">=</span><span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
   <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/head<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
   <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;body<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
      <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;wrapper&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
         <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;<span class="hljs-subst">!--</span> <span class="hljs-keyword">Header</span> <span class="hljs-subst">--&amp;</span><span class="hljs-literal">gt</span>;
         <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;header&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
            <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;branding&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
               <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;blog-title&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;span<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-attribute">...</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/span<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
            <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
            <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;access&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
               <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div class<span class="hljs-subst">=</span><span class="hljs-string">&quot;menu&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
                  <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;ul<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-attribute">...</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/ul<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
               <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
            <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
         <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
         <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;<span class="hljs-subst">!--</span> Main <span class="hljs-subst">--&amp;</span><span class="hljs-literal">gt</span>;
         <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;main&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
            <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;container&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
               <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;content&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
                  <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-attribute">...</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
               <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
            <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
            <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;primary&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
               <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;ul<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-attribute">...</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/ul<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
            <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
         <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
         <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;<span class="hljs-subst">!--</span> Footer <span class="hljs-subst">--&amp;</span><span class="hljs-literal">gt</span>;
         <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;footer&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
            <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;div id<span class="hljs-subst">=</span><span class="hljs-string">&quot;siteinfo&quot;</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;<span class="hljs-attribute">...</span><span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
         <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
      <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/div<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
   <span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/body<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;
<span class="hljs-subst">&amp;</span><span class="hljs-literal">lt</span>;/html<span class="hljs-subst">&amp;</span><span class="hljs-literal">gt</span>;</code></pre><p><strong>1. Body and wrapper</strong></p>
<p>In all of the frameworks, the body classes contain various information such as the platform (windows) and the browser (firefox, ff3).</p>
<p>Benefits:
<strong>Easier to specify per-browser css fixes</strong> (if needed). This makes it easier to make adjustments based on the browser or OS used in CSS, eg. &quot;.windows xxx.yyy { ... }&quot;.</p>
<p><strong>Separation between body and content wrapper</strong>. In the framework, the content is wrapped in a wrapper layer (id=wrapper), so that the body has only one child element. I would imagine this is to make it easier to use CSS to adjust the padding and background of the pages.</p>
<p><strong>2. Heading</strong></p>
<p>The heading consists of two sub-divs, as shown below:</p>
<p><a href="http://blog.mixu.net/files/2010/06/thematic.png"><img class="alignnone size-full wp-image-951" title="thematic" src="http://blog.mixu.net/files/2010/06/thematic.png" alt="" width="533" height="421" /></a></p>
<p>There are only three subelements to the content wrapper: heading, main and footer. Each of these divs is full-size and positioned relatively.</p>
<p>Benefits:
<strong>Easy to add repeating backgrounds</strong>. One can easily apply a CSS background-image to create a repeating and consistent heading.</p>
<p><strong>Easy positioning of the elements</strong>. The heading consist of the branding and access divs. This makes it easy to add new heading elements in the branding, while keeping the menu (=access div) separate, with it&#39;s own background.</p>
<p><strong>Standard menu HTML</strong>. All of the frameworks appear to be using the <a href="http://users.tpg.com.au/j_birch/plugins/superfish/#examples">Superfish menu</a> by default, which is based on jQuery.</p>
<p><strong>3. Main content </strong></p>
<p>The main content consists of a container with a content-sub-div and a primary sidebar:</p>
<p><a href="http://blog.mixu.net/files/2010/06/thematic-main.png"><img class="alignnone size-full wp-image-952" title="thematic-main" src="http://blog.mixu.net/files/2010/06/thematic-main.png" alt="" width="533" height="743" /></a></p>
<p>The main content div has a fixed size. This is then subdivided into two divs, container (for the content) and primary (for the primary menu block).</p>
<p>Benefits:
<strong>Semantic markup; floats to reposition</strong> Having these separate divs means that switching from &quot;menu on the right&quot; to menu on the left is simple, since one can change the CSS float directions to reverse the positions of the subcontainers.
<strong>Easy to add new content areas</strong> One could also add more subdiv for additional content areas, and create multiple columns relatively easily by positioning the subdivs within the main content div.
<strong>Easy to add sub-items</strong> The primary menu is a div, with each block having its own unordered list (ul). In practice, this leads to two levels of lists - one for the item blocks themselves, the other for the sub-items (e.g. the links in a Archives block).</p>
<p><strong>4. Footer</strong></p>
<p>The footer consists of a single subdiv:</p>
<p><a href="http://blog.mixu.net/files/2010/06/thematic-footer.png"><img class="alignnone size-full wp-image-953" title="thematic-footer" src="http://blog.mixu.net/files/2010/06/thematic-footer.png" alt="" width="533" height="160" /></a></p>
<p>Again, the top-level div only specifies the margin, while the inner divs are positioned within it. This makes it easy to add a background to the footer div.</p>
<p><strong>Does this work?</strong></p>
<p>I&#39;m currently using this approach in recent two web applications I built. The markup seems a lot cleaner, more standard and I have found that re-theming the same basic HTML is much nicer than reinventing the wheel. In short, I think this is a good approach. Let me know if you have improvements via a comment.</p>
<p><strong>Somewhat related: What about other techniques, such as CSS Grid frameworks or Haml/Sass?</strong></p>
<p>I&#39;m not yet convinced that I need to use a CSS Grid framework (e.g. <a href="http://stackoverflow.com/questions/203069/what-is-the-best-css-framework-and-are-they-worth-the-effort/203133#203133">Stackoverflow discussion</a>).</p>
<p>As for <a href="http://en.wikipedia.org/wiki/Haml">Haml</a>, I&#39;m pretty sure that I am fine with regular HTML without any syntactic sugar.</p>
<p><a href="http://sass-lang.com/">Sass</a> seems to be a real improvement over CSS (variables, nesting, mixins etc.), but on the other hand I haven&#39;t had the time to set it up with my non-Ruby environment.</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Tue, 20 Jul 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[Quick tip: Netbeans is excluding / ignoring directories in version control]]></title><description><![CDATA[<p>Is Netbeans not showing the version control options correctly for some of your directories? Check whether you have accidentally left .svn directories. All source control system directories are hidden by default in Netbeans, which makes spotting this a bit tricky.</p>
<p>Check for whether there is a another repo, e.g. a .svn directory somewhere in your path. Netbeans seems to allow &quot;stacking&quot; source control systems, and will unsuccessfully try to load this versioning data instead of whatever you are using in your repository. This means that you won&#39;t get those pretty markers for modified lines and won&#39;t be able to view history for those files or perform a diff from the Netbeans GUI.</p>
<p>See ~/.netbeans/$version/var/log/messages.log for debugging information. Look for messages related to source control loading failures.</p>
<p>Get rid of the extra directories (e.g. .svn in each directory) in your repo, and delete ~/.netbeans/$version/var/cache/svncache to avoid conflicts with cached incorrect versioning data.</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Sat, 10 Jul 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[Quick tip: how to fix "mysqlnd cannot connect to MySQL 4.1+ using old authentication" onPHP5.3]]></title><description><![CDATA[<p>I recently upgraded to PHP 5.3 on Windows, and ran into this problem:</p>
<pre class="hljs"><code>
Warning: mysql_connect(): OK packet <span class="hljs-number">6</span> bytes shorter than expected <span class="hljs-keyword">in</span> <span class="hljs-keyword">...</span>
Warning: mysql_connect(): mysqlnd cannot connect to MySQL <span class="hljs-number">4.1</span>+ using old authentication <span class="hljs-keyword">in</span> <span class="hljs-keyword">...</span></code></pre><p>I run my Linux servers on VMWare when I do development, so the MySQL database itself was from quite a while ago. As you will see, the core issue here is that MySQL can have passwords with hashes stored in the old 16-character format, which is not supported by PHP 5.3&#39;s new mysqlnd  library.</p>
<p>Since I couldn&#39;t find a good solution with a quick Google, here is how I solved this <strong>without having to downgrade PHP or MySQL</strong> (as some of the solutions suggested):</p>
<p><strong>1. Change MySQL to NOT to use old_passwords </strong></p>
<p>It seems that even MySQL 5.x versions still default to the old password hashes. You need to change this in &quot;my.cnf&quot; (e.g. /etc/my.cnf): remove or comment out the line that says</p>
<pre class="hljs"><code>
<span class="hljs-title">old_passwords</span> = <span class="hljs-number">1</span></code></pre><p>Restart MySQL. If you don&#39;t, MySQL will keep using the old password format, which will mean that you cannot upgrade the passwords using the builtin PASSWORD() hashing function. You can test this by running:</p>
<pre lang="sql">
 SELECT Length(PASSWORD('xyz'));
+-------------------------+
| Length(PASSWORD('xyz')) |
+-------------------------+
|                      16 |
+-------------------------+
1 row in set (0.00 sec)
</pre>

<p>The old password hashes are 16 characters, the new ones are 41 characters.</p>
<p><strong>2. Change the format of all the passwords in the database to the new format</strong></p>
<p>Connect to the database, and run the following query:</p>
<pre lang="sql">
SELECT user,  Length(`Password`) FROM   `mysql`.`user`;
</pre>

<p>This will show you which passwords are in the old format, ex:</p>
<pre lang="sql">
+----------+--------------------+
| user     | Length(`Password`) |
+----------+--------------------+
| root     |                 41 |
| root     |                 16 |
| user2    |                 16 |
| user2    |                 16 |
+----------+--------------------+
</pre>

<p>Notice here that each user can have multiple rows (one for each different host specification).</p>
<p>To update the password for each user, run the following:</p>
<pre lang="sql">
UPDATE mysql.user SET Password = PASSWORD('password') WHERE user = 'username';
</pre>

<p>Finally, flush privileges:</p>
<pre class="hljs"><code>
<span class="hljs-operator"><span class="hljs-keyword">FLUSH</span> <span class="hljs-keyword">PRIVILEGES</span>;</span></code></pre><h2 id="comments">Comments</h2>
<p><strong><a href="#230" title="2010-08-25 02:46:11">mark</a>:</strong> That was a big help - we had some trouble with this same issue today while migrating to a new server. It was not clear why the install worked on the old system but not a very similar new system until we found your post.</p>
<p><strong><a href="#231" title="2010-09-22 04:27:44">Mahbub</a>:</strong> Hey Mixu, That was really a relief from the stupid error. I recently upgraded XAMPP which is 1.7.4 (beta) and php5.3.3. It killed my 1.5 hrs yesterday.</p>
<p>For windows users, please edit [xampp installation dir]mysqlbinmy.ini to set the value  old_passwords = 1</p>
<p><strong><a href="#232" title="2010-11-23 20:59:06">Khupcom</a>:</strong> Oh my God... I&#39;ve been 2 days stuck with this problem and the solution only :
UPDATE mysql.user SET Password = PASSWORD(&#39;mynewpass&#39;) WHERE user = &#39;myusername&#39;;</p>
<p>FLUSH PRIVILEGES;</p>
<p>I just want to say you&#39;re my hero</p>
<p>Really big thanx</p>
<p><strong><a href="#234" title="2011-04-29 22:35:39">Alex</a>:</strong> I did everything you said, and I still get the same error... Something&#39;s wrong lol</p>
<p><strong><a href="#235" title="2011-05-07 15:46:25">Sailesh</a>:</strong> Hey! Mixu.... Thanks man! I took 2 days to find this solution. It helped me a lot. I&#39;ve added your post onto my blog.</p>
<p>Thanks again! :)</p>
<p><strong><a href="#236" title="2011-06-18 01:35:51">neverstopdreaming</a>:</strong> Thanks!</p>
<p><strong><a href="#237" title="2011-08-19 18:03:26">Luis</a>:</strong> How can I change this settings if I&#39;m working in a remote server with their own control panel and phpMyAdmin.  Can I change the setting of MySQL in the remote site?</p>
<p><strong><a href="#238" title="2011-09-12 21:26:56">Adam</a>:</strong> Allelujah. My evening is saved. Thanks!</p>
<p><strong><a href="#240" title="2011-12-20 17:45:36">Pedro</a>:</strong> Thank you</p>
<p><strong><a href="#242" title="2012-01-13 17:03:03">Ebow</a>:</strong> Your a life saver</p>
]]></description><link>http://localhost:5000undefined</link><guid isPermaLink="true">http://localhost:5000undefined</guid><dc:creator><![CDATA[Mixu]]></dc:creator><pubDate>Sun, 06 Jun 2010 07:00:00 GMT</pubDate></item></channel></rss>