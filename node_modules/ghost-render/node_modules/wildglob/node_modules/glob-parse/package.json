{
  "name": "glob-parse",
  "version": "0.0.1",
  "description": "Returns a parsed representation of a glob string; does not require Minimatch.",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:mixu/glob-parse.git"
  },
  "keywords": [
    "glob",
    "parse",
    "parser",
    "tokenizer"
  ],
  "author": {
    "name": "Mikito Takada",
    "email": "mikito.takada@gmail.com",
    "url": "http://mixu.net/"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/mixu/glob-parse/issues"
  },
  "homepage": "https://github.com/mixu/glob-parse",
  "readme": "# glob-parse\n\nReturns a parsed representation of a glob string; does not require [Minimatch](https://github.com/isaacs/minimatch).\n\n## Features\n\n- Works on any string, does not require [Minimatch](https://github.com/isaacs/minimatch) or any other separate glob library.\n- Does not perform glob matching: it just parses a glob expression into segments and produces relevant metadata about those segments.\n- Pure parsing/tokenization is useful for working with glob expressions. For example:\n\n[wildglob](https://github.com/mixu/wildglob) uses `glob-parse` to parse the different segments of the input glob and then combines the string segments to determine where to start glob matching.\n\n[glob2base](https://github.com/wearefractal/glob2base) extracts a base path from a glob. It uses Minimatch to do this, but `glob-parse` (the `.basename()` function) can also be used to extract the base path from a glob.\n\n## API and examples\n\n### Basic parsing\n\n````js\nvar parse = require('glob-parse');\nconsole.log(parse('js/*.js'));\n// [ 'js/', '*', '.js' ]\nconsole.log(parse('js/**/test/*.js'));\n// [ 'js/', '**', '/test/', '*', '.js' ]\n````\n\n### .basename()\n\n`basename()` works like `glob2base`:\n\n````js\nconsole.log(parse.basename('js/test{0..9}/*.js'));\n// js/\nconsole.log(parse.basename('js/t+(wo|est)/*.js'));\n// js/\nconsole.log(parse.basename('lib/{components,pages}/**/{test,another}/*.txt'));\n// lib/\n````\n\n\n### Full type annotations\n\nPass { full: true } to return the token type annotations.\n\n````js\nconsole.log(parse('js/t[a-z]st/*.js', { full: true }));\n// { parts: [ 'js/t', '[a-z]', 'st/', '*', '.js' ],\n//   types: [ 'str', 'set', 'str', '*', 'str' ] }\n\nconsole.log(parse('js/{src,test}/*.js', { full: true }));\n// { parts: [ 'js/', '{src,test}', '/', '*', '.js' ],\n//   types: [ 'str', 'brace', 'str', '*', 'str' ] }\n\nconsole.log(parse('test/+(a|b|c)/a{/,bc*}/**', { full: true }));\n// { parts: [ 'test/', '+(a|b|c)', '/a', '{/,bc*}', '/', '**' ],\n//   types: [ 'str', 'ext', 'str', 'brace', 'str', '**' ] }\n````\n",
  "readmeFilename": "readme.md",
  "_id": "glob-parse@0.0.1",
  "_from": "glob-parse@0.0.1"
}
